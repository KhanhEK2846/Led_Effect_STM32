
Lab1_GPIO_Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003e34  08003e34  00013e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea8  08003ea8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003ea8  08003ea8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ea8  08003ea8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003eb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000078  08003f28  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08003f28  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6c8  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ffa  00000000  00000000  0002d769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  0002f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00030500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ec7  00000000  00000000  000311d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010310  00000000  00000000  00049097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b47f  00000000  00000000  000593a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4826  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c5c  00000000  00000000  000e4878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e1c 	.word	0x08003e1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003e1c 	.word	0x08003e1c

0800014c <button1_handle>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void button1_handle(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	//-------- Xu ly loc nhieu ------
	//dung timer systick phuc vu loc nhieu
	//giai thuat kieu:
	//1. phat hien thay doi trang thai
	//2. cu co nhieu, reset time_debounce
	uint8_t sta1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0); //BTN1
 8000152:	2101      	movs	r1, #1
 8000154:	4831      	ldr	r0, [pc, #196]	; (800021c <button1_handle+0xd0>)
 8000156:	f001 fb53 	bl	8001800 <HAL_GPIO_ReadPin>
 800015a:	4603      	mov	r3, r0
 800015c:	71fb      	strb	r3, [r7, #7]
	//KIT truong button1 hardware hong - SSID: ESP32_S2
	//cu co nhieu gan lai button filter
	if(sta1 != button1_filter) //trang thai doc duoc, khac voi trang thai truoc (button_filter)
 800015e:	4b30      	ldr	r3, [pc, #192]	; (8000220 <button1_handle+0xd4>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	79fa      	ldrb	r2, [r7, #7]
 8000164:	429a      	cmp	r2, r3
 8000166:	d00a      	beq.n	800017e <button1_handle+0x32>
	{
		//co su thay doi trang thai thi se vao day gan lien tuc vao button filter
		button1_filter = sta1;
 8000168:	4a2d      	ldr	r2, [pc, #180]	; (8000220 <button1_handle+0xd4>)
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	7013      	strb	r3, [r2, #0]
		is_debouncing1 = 1;
 800016e:	4b2d      	ldr	r3, [pc, #180]	; (8000224 <button1_handle+0xd8>)
 8000170:	2201      	movs	r2, #1
 8000172:	701a      	strb	r2, [r3, #0]
		time_debounce1 = HAL_GetTick(); //moi lan co xung nhieu time debounce duoc cap nhat lai
 8000174:	f000 fe50 	bl	8000e18 <HAL_GetTick>
 8000178:	4603      	mov	r3, r0
 800017a:	4a2b      	ldr	r2, [pc, #172]	; (8000228 <button1_handle+0xdc>)
 800017c:	6013      	str	r3, [r2, #0]
	}
	//-------- Xac lap tin hieu ------
	if(is_debouncing1 == 1 && (HAL_GetTick()-time_debounce1 >= 15)) //check nhieu (standard vong check nhieu = 15ms) - callib
 800017e:	4b29      	ldr	r3, [pc, #164]	; (8000224 <button1_handle+0xd8>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b01      	cmp	r3, #1
 8000184:	d10e      	bne.n	80001a4 <button1_handle+0x58>
 8000186:	f000 fe47 	bl	8000e18 <HAL_GetTick>
 800018a:	4602      	mov	r2, r0
 800018c:	4b26      	ldr	r3, [pc, #152]	; (8000228 <button1_handle+0xdc>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	1ad3      	subs	r3, r2, r3
 8000192:	2b0e      	cmp	r3, #14
 8000194:	d906      	bls.n	80001a4 <button1_handle+0x58>
	{
		button1_current = button1_filter;
 8000196:	4b22      	ldr	r3, [pc, #136]	; (8000220 <button1_handle+0xd4>)
 8000198:	781a      	ldrb	r2, [r3, #0]
 800019a:	4b24      	ldr	r3, [pc, #144]	; (800022c <button1_handle+0xe0>)
 800019c:	701a      	strb	r2, [r3, #0]
		is_debouncing1 = 0;
 800019e:	4b21      	ldr	r3, [pc, #132]	; (8000224 <button1_handle+0xd8>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	701a      	strb	r2, [r3, #0]
	}
	//-------- Xu ly nut nhan --------
	if(button1_current != button1_last)
 80001a4:	4b21      	ldr	r3, [pc, #132]	; (800022c <button1_handle+0xe0>)
 80001a6:	781a      	ldrb	r2, [r3, #0]
 80001a8:	4b21      	ldr	r3, [pc, #132]	; (8000230 <button1_handle+0xe4>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d021      	beq.n	80001f4 <button1_handle+0xa8>
	{
		if(button1_current == 0) //truong hop dang nhan nut
 80001b0:	4b1e      	ldr	r3, [pc, #120]	; (800022c <button1_handle+0xe0>)
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d108      	bne.n	80001ca <button1_handle+0x7e>
		{
			//button_pressing_callback();
			is_press_timeout1 = 1;
 80001b8:	4b1e      	ldr	r3, [pc, #120]	; (8000234 <button1_handle+0xe8>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	701a      	strb	r2, [r3, #0]
			time_btn_press1 = HAL_GetTick();
 80001be:	f000 fe2b 	bl	8000e18 <HAL_GetTick>
 80001c2:	4603      	mov	r3, r0
 80001c4:	4a1c      	ldr	r2, [pc, #112]	; (8000238 <button1_handle+0xec>)
 80001c6:	6013      	str	r3, [r2, #0]
 80001c8:	e010      	b.n	80001ec <button1_handle+0xa0>
		} else { //nha nut
			//tuc la khoang thoi gian ke tu luc nhan cho den luc nha ra < 500ms
			if(HAL_GetTick() - time_btn_press1 < 500)
 80001ca:	f000 fe25 	bl	8000e18 <HAL_GetTick>
 80001ce:	4602      	mov	r2, r0
 80001d0:	4b19      	ldr	r3, [pc, #100]	; (8000238 <button1_handle+0xec>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	1ad3      	subs	r3, r2, r3
 80001d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80001da:	d204      	bcs.n	80001e6 <button1_handle+0x9a>
			{
				button1_shortpressing_callback_500ms();
 80001dc:	f000 f8aa 	bl	8000334 <button1_shortpressing_callback_500ms>
				is_press_timeout1 = 0;
 80001e0:	4b14      	ldr	r3, [pc, #80]	; (8000234 <button1_handle+0xe8>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	701a      	strb	r2, [r3, #0]
			}
			is_long_press1 = 0;
 80001e6:	4b15      	ldr	r3, [pc, #84]	; (800023c <button1_handle+0xf0>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
			//button_release_callback();
		}
		button1_last = button1_current; //muc dich neu trang thai nut bam sau khi xac lap khac trang thai truoc thi xu ly callback
 80001ec:	4b0f      	ldr	r3, [pc, #60]	; (800022c <button1_handle+0xe0>)
 80001ee:	781a      	ldrb	r2, [r3, #0]
 80001f0:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <button1_handle+0xe4>)
 80001f2:	701a      	strb	r2, [r3, #0]
	}
	if(is_press_timeout1 == 1 && (HAL_GetTick() - time_btn_press1 >= 500))
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <button1_handle+0xe8>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d10a      	bne.n	8000212 <button1_handle+0xc6>
 80001fc:	f000 fe0c 	bl	8000e18 <HAL_GetTick>
 8000200:	4602      	mov	r2, r0
 8000202:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <button1_handle+0xec>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	1ad3      	subs	r3, r2, r3
 8000208:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800020c:	d301      	bcc.n	8000212 <button1_handle+0xc6>
	{
		button1_longpressing_callback_500ms();
 800020e:	f000 f8b7 	bl	8000380 <button1_longpressing_callback_500ms>
	}
}
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010c00 	.word	0x40010c00
 8000220:	20000004 	.word	0x20000004
 8000224:	200001d9 	.word	0x200001d9
 8000228:	200001dc 	.word	0x200001dc
 800022c:	20000002 	.word	0x20000002
 8000230:	20000003 	.word	0x20000003
 8000234:	200001e4 	.word	0x200001e4
 8000238:	200001e0 	.word	0x200001e0
 800023c:	200001e5 	.word	0x200001e5

08000240 <button2_handle>:

void button2_handle(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	//-------- Xu ly loc nhieu ------
	//dung timer systick phuc vu loc nhieu
	//giai thuat kieu:
	//1. phat hien thay doi trang thai
	//2. cu co nhieu, reset time_debounce
	uint8_t sta2 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); //BTN2
 8000246:	2102      	movs	r1, #2
 8000248:	4831      	ldr	r0, [pc, #196]	; (8000310 <button2_handle+0xd0>)
 800024a:	f001 fad9 	bl	8001800 <HAL_GPIO_ReadPin>
 800024e:	4603      	mov	r3, r0
 8000250:	71fb      	strb	r3, [r7, #7]
	//cu co nhieu gan lai button filter
	if(sta2 != button2_filter) //trang thai doc duoc, khac voi trang thai truoc (button_filter)
 8000252:	4b30      	ldr	r3, [pc, #192]	; (8000314 <button2_handle+0xd4>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	79fa      	ldrb	r2, [r7, #7]
 8000258:	429a      	cmp	r2, r3
 800025a:	d00a      	beq.n	8000272 <button2_handle+0x32>
	{
		//co su thay doi trang thai thi se vao day gan lien tuc vao button filter
		button2_filter = sta2;
 800025c:	4a2d      	ldr	r2, [pc, #180]	; (8000314 <button2_handle+0xd4>)
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	7013      	strb	r3, [r2, #0]
		is_debouncing2 = 1;
 8000262:	4b2d      	ldr	r3, [pc, #180]	; (8000318 <button2_handle+0xd8>)
 8000264:	2201      	movs	r2, #1
 8000266:	701a      	strb	r2, [r3, #0]
		time_debounce2 = HAL_GetTick(); //moi lan co xung nhieu time debounce duoc cap nhat lai
 8000268:	f000 fdd6 	bl	8000e18 <HAL_GetTick>
 800026c:	4603      	mov	r3, r0
 800026e:	4a2b      	ldr	r2, [pc, #172]	; (800031c <button2_handle+0xdc>)
 8000270:	6013      	str	r3, [r2, #0]
	}
	//-------- Xac lap tin hieu ------
	if(is_debouncing2 == 1 && (HAL_GetTick()-time_debounce2 >= 15)) //check nhieu (standard vong check nhieu = 15ms) - callib
 8000272:	4b29      	ldr	r3, [pc, #164]	; (8000318 <button2_handle+0xd8>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d10e      	bne.n	8000298 <button2_handle+0x58>
 800027a:	f000 fdcd 	bl	8000e18 <HAL_GetTick>
 800027e:	4602      	mov	r2, r0
 8000280:	4b26      	ldr	r3, [pc, #152]	; (800031c <button2_handle+0xdc>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	1ad3      	subs	r3, r2, r3
 8000286:	2b0e      	cmp	r3, #14
 8000288:	d906      	bls.n	8000298 <button2_handle+0x58>
	{
		button2_current = button2_filter;
 800028a:	4b22      	ldr	r3, [pc, #136]	; (8000314 <button2_handle+0xd4>)
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	4b24      	ldr	r3, [pc, #144]	; (8000320 <button2_handle+0xe0>)
 8000290:	701a      	strb	r2, [r3, #0]
		is_debouncing2 = 0;
 8000292:	4b21      	ldr	r3, [pc, #132]	; (8000318 <button2_handle+0xd8>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
	}
	//-------- Xu ly nut nhan --------
	if(button2_current != button2_last)
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <button2_handle+0xe0>)
 800029a:	781a      	ldrb	r2, [r3, #0]
 800029c:	4b21      	ldr	r3, [pc, #132]	; (8000324 <button2_handle+0xe4>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d021      	beq.n	80002e8 <button2_handle+0xa8>
	{
		if(button2_current == 0) //truong hop dang nhan nut
 80002a4:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <button2_handle+0xe0>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d108      	bne.n	80002be <button2_handle+0x7e>
		{
			//button_pressing_callback();
			is_press_timeout2 = 1;
 80002ac:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <button2_handle+0xe8>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]
			time_btn_press2 = HAL_GetTick();
 80002b2:	f000 fdb1 	bl	8000e18 <HAL_GetTick>
 80002b6:	4603      	mov	r3, r0
 80002b8:	4a1c      	ldr	r2, [pc, #112]	; (800032c <button2_handle+0xec>)
 80002ba:	6013      	str	r3, [r2, #0]
 80002bc:	e010      	b.n	80002e0 <button2_handle+0xa0>
		} else { //nha nut
			//tuc la khoang thoi gian ke tu luc nhan cho den luc nha ra < 500ms
			if(HAL_GetTick() - time_btn_press2 < 500)
 80002be:	f000 fdab 	bl	8000e18 <HAL_GetTick>
 80002c2:	4602      	mov	r2, r0
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <button2_handle+0xec>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80002ce:	d204      	bcs.n	80002da <button2_handle+0x9a>
			{
				button2_shortpressing_callback_500ms();
 80002d0:	f000 f836 	bl	8000340 <button2_shortpressing_callback_500ms>
				is_press_timeout2 = 0;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <button2_handle+0xe8>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
			}
			is_long_press2 = 0;
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <button2_handle+0xf0>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
			//button_release_callback();
		}
		button2_last = button2_current; //muc dich neu trang thai nut bam sau khi xac lap khac trang thai truoc thi xu ly callback
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <button2_handle+0xe0>)
 80002e2:	781a      	ldrb	r2, [r3, #0]
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <button2_handle+0xe4>)
 80002e6:	701a      	strb	r2, [r3, #0]
	}
	if(is_press_timeout2 == 1 && (HAL_GetTick() - time_btn_press2 >= 500))
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <button2_handle+0xe8>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d10a      	bne.n	8000306 <button2_handle+0xc6>
 80002f0:	f000 fd92 	bl	8000e18 <HAL_GetTick>
 80002f4:	4602      	mov	r2, r0
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <button2_handle+0xec>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	1ad3      	subs	r3, r2, r3
 80002fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000300:	d301      	bcc.n	8000306 <button2_handle+0xc6>
	{
		button2_longpressing_callback_500ms();
 8000302:	f000 f853 	bl	80003ac <button2_longpressing_callback_500ms>
	}
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010c00 	.word	0x40010c00
 8000314:	20000007 	.word	0x20000007
 8000318:	200001e6 	.word	0x200001e6
 800031c:	200001e8 	.word	0x200001e8
 8000320:	20000005 	.word	0x20000005
 8000324:	20000006 	.word	0x20000006
 8000328:	200001f0 	.word	0x200001f0
 800032c:	200001ec 	.word	0x200001ec
 8000330:	200001f1 	.word	0x200001f1

08000334 <button1_shortpressing_callback_500ms>:
{
	test = 4;
}

void button1_shortpressing_callback_500ms(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	time_cycle_dec_callback();
 8000338:	f000 f864 	bl	8000404 <time_cycle_dec_callback>
}
 800033c:	bf00      	nop
 800033e:	bd80      	pop	{r7, pc}

08000340 <button2_shortpressing_callback_500ms>:

void button2_shortpressing_callback_500ms(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	switch(led_eff_state)
 8000344:	4b0d      	ldr	r3, [pc, #52]	; (800037c <button2_shortpressing_callback_500ms+0x3c>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b02      	cmp	r3, #2
 800034a:	d00e      	beq.n	800036a <button2_shortpressing_callback_500ms+0x2a>
 800034c:	2b02      	cmp	r3, #2
 800034e:	dc10      	bgt.n	8000372 <button2_shortpressing_callback_500ms+0x32>
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <button2_shortpressing_callback_500ms+0x1a>
 8000354:	2b01      	cmp	r3, #1
 8000356:	d004      	beq.n	8000362 <button2_shortpressing_callback_500ms+0x22>
		break;
		case LED_BLINK_ALTER:
			led_eff_state = LED_BLINK_ORIGIN;
		break;
	}
}
 8000358:	e00b      	b.n	8000372 <button2_shortpressing_callback_500ms+0x32>
				led_eff_state = LED_BLINK_SEQ;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <button2_shortpressing_callback_500ms+0x3c>)
 800035c:	2201      	movs	r2, #1
 800035e:	701a      	strb	r2, [r3, #0]
		break;
 8000360:	e007      	b.n	8000372 <button2_shortpressing_callback_500ms+0x32>
			led_eff_state = LED_BLINK_ALTER;
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <button2_shortpressing_callback_500ms+0x3c>)
 8000364:	2202      	movs	r2, #2
 8000366:	701a      	strb	r2, [r3, #0]
		break;
 8000368:	e003      	b.n	8000372 <button2_shortpressing_callback_500ms+0x32>
			led_eff_state = LED_BLINK_ORIGIN;
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <button2_shortpressing_callback_500ms+0x3c>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
		break;
 8000370:	bf00      	nop
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	2000016c 	.word	0x2000016c

08000380 <button1_longpressing_callback_500ms>:


void button1_longpressing_callback_500ms(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
	cycle_change_mode = 0;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <button1_longpressing_callback_500ms+0x20>)
 8000386:	2200      	movs	r2, #0
 8000388:	701a      	strb	r2, [r3, #0]
	is_long_press1 = 1;
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <button1_longpressing_callback_500ms+0x24>)
 800038c:	2201      	movs	r2, #1
 800038e:	701a      	strb	r2, [r3, #0]
	is_press_timeout1 = 0;
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <button1_longpressing_callback_500ms+0x28>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	200001f2 	.word	0x200001f2
 80003a4:	200001e5 	.word	0x200001e5
 80003a8:	200001e4 	.word	0x200001e4

080003ac <button2_longpressing_callback_500ms>:

void button2_longpressing_callback_500ms(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	cycle_change_mode = 1;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <button2_longpressing_callback_500ms+0x20>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	701a      	strb	r2, [r3, #0]
	is_long_press2 = 1;
 80003b6:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <button2_longpressing_callback_500ms+0x24>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]
	is_press_timeout2 = 0;
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <button2_longpressing_callback_500ms+0x28>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	200001f2 	.word	0x200001f2
 80003d0:	200001f1 	.word	0x200001f1
 80003d4:	200001f0 	.word	0x200001f0

080003d8 <time_cycle_inc_callback>:

void time_cycle_inc_callback(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	if(max_cycle_led_time == 2000)
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <time_cycle_inc_callback+0x28>)
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003e4:	d102      	bne.n	80003ec <time_cycle_inc_callback+0x14>
	{
		max_cycle_led_time = 0;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <time_cycle_inc_callback+0x28>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	801a      	strh	r2, [r3, #0]
	}
	max_cycle_led_time += 100;
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <time_cycle_inc_callback+0x28>)
 80003ee:	881b      	ldrh	r3, [r3, #0]
 80003f0:	3364      	adds	r3, #100	; 0x64
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4b02      	ldr	r3, [pc, #8]	; (8000400 <time_cycle_inc_callback+0x28>)
 80003f6:	801a      	strh	r2, [r3, #0]
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	20000000 	.word	0x20000000

08000404 <time_cycle_dec_callback>:

void time_cycle_dec_callback(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	if(max_cycle_led_time == 0)
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <time_cycle_dec_callback+0x28>)
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d103      	bne.n	8000418 <time_cycle_dec_callback+0x14>
	{
		max_cycle_led_time = 2000;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <time_cycle_dec_callback+0x28>)
 8000412:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000416:	801a      	strh	r2, [r3, #0]
	}
	max_cycle_led_time -= 100;
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <time_cycle_dec_callback+0x28>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	3b64      	subs	r3, #100	; 0x64
 800041e:	b29a      	uxth	r2, r3
 8000420:	4b02      	ldr	r3, [pc, #8]	; (800042c <time_cycle_dec_callback+0x28>)
 8000422:	801a      	strh	r2, [r3, #0]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	20000000 	.word	0x20000000

08000430 <led_blink_origin>:

void led_blink_origin(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	if(count_led_blink == 0){
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <led_blink_origin+0x64>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d112      	bne.n	8000462 <led_blink_origin+0x32>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2108      	movs	r1, #8
 8000440:	4815      	ldr	r0, [pc, #84]	; (8000498 <led_blink_origin+0x68>)
 8000442:	f001 f9f4 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000446:	2201      	movs	r2, #1
 8000448:	2110      	movs	r1, #16
 800044a:	4813      	ldr	r0, [pc, #76]	; (8000498 <led_blink_origin+0x68>)
 800044c:	f001 f9ef 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2120      	movs	r1, #32
 8000454:	4810      	ldr	r0, [pc, #64]	; (8000498 <led_blink_origin+0x68>)
 8000456:	f001 f9ea 	bl	800182e <HAL_GPIO_WritePin>
		count_led_blink = 1;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <led_blink_origin+0x64>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		count_led_blink = 0;
	}
}
 8000460:	e015      	b.n	800048e <led_blink_origin+0x5e>
	} else if (count_led_blink == 1){
 8000462:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <led_blink_origin+0x64>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d111      	bne.n	800048e <led_blink_origin+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2108      	movs	r1, #8
 800046e:	480a      	ldr	r0, [pc, #40]	; (8000498 <led_blink_origin+0x68>)
 8000470:	f001 f9dd 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2110      	movs	r1, #16
 8000478:	4807      	ldr	r0, [pc, #28]	; (8000498 <led_blink_origin+0x68>)
 800047a:	f001 f9d8 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2120      	movs	r1, #32
 8000482:	4805      	ldr	r0, [pc, #20]	; (8000498 <led_blink_origin+0x68>)
 8000484:	f001 f9d3 	bl	800182e <HAL_GPIO_WritePin>
		count_led_blink = 0;
 8000488:	4b02      	ldr	r3, [pc, #8]	; (8000494 <led_blink_origin+0x64>)
 800048a:	2200      	movs	r2, #0
 800048c:	701a      	strb	r2, [r3, #0]
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200001d8 	.word	0x200001d8
 8000498:	40010c00 	.word	0x40010c00

0800049c <led_blink_sequence>:

void led_blink_sequence(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	if(count_led_seq == 0)
 80004a0:	4b2e      	ldr	r3, [pc, #184]	; (800055c <led_blink_sequence+0xc0>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d112      	bne.n	80004ce <led_blink_sequence+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	2108      	movs	r1, #8
 80004ac:	482c      	ldr	r0, [pc, #176]	; (8000560 <led_blink_sequence+0xc4>)
 80004ae:	f001 f9be 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2110      	movs	r1, #16
 80004b6:	482a      	ldr	r0, [pc, #168]	; (8000560 <led_blink_sequence+0xc4>)
 80004b8:	f001 f9b9 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2120      	movs	r1, #32
 80004c0:	4827      	ldr	r0, [pc, #156]	; (8000560 <led_blink_sequence+0xc4>)
 80004c2:	f001 f9b4 	bl	800182e <HAL_GPIO_WritePin>
		count_led_seq = 1;
 80004c6:	4b25      	ldr	r3, [pc, #148]	; (800055c <led_blink_sequence+0xc0>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
		count_led_seq = 0;
	}
}
 80004cc:	e043      	b.n	8000556 <led_blink_sequence+0xba>
	} else if(count_led_seq == 1)
 80004ce:	4b23      	ldr	r3, [pc, #140]	; (800055c <led_blink_sequence+0xc0>)
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d112      	bne.n	80004fc <led_blink_sequence+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2108      	movs	r1, #8
 80004da:	4821      	ldr	r0, [pc, #132]	; (8000560 <led_blink_sequence+0xc4>)
 80004dc:	f001 f9a7 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2110      	movs	r1, #16
 80004e4:	481e      	ldr	r0, [pc, #120]	; (8000560 <led_blink_sequence+0xc4>)
 80004e6:	f001 f9a2 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	2120      	movs	r1, #32
 80004ee:	481c      	ldr	r0, [pc, #112]	; (8000560 <led_blink_sequence+0xc4>)
 80004f0:	f001 f99d 	bl	800182e <HAL_GPIO_WritePin>
		count_led_seq = 2;
 80004f4:	4b19      	ldr	r3, [pc, #100]	; (800055c <led_blink_sequence+0xc0>)
 80004f6:	2202      	movs	r2, #2
 80004f8:	701a      	strb	r2, [r3, #0]
}
 80004fa:	e02c      	b.n	8000556 <led_blink_sequence+0xba>
	} else if (count_led_seq == 2)
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <led_blink_sequence+0xc0>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d112      	bne.n	800052a <led_blink_sequence+0x8e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2108      	movs	r1, #8
 8000508:	4815      	ldr	r0, [pc, #84]	; (8000560 <led_blink_sequence+0xc4>)
 800050a:	f001 f990 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800050e:	2200      	movs	r2, #0
 8000510:	2110      	movs	r1, #16
 8000512:	4813      	ldr	r0, [pc, #76]	; (8000560 <led_blink_sequence+0xc4>)
 8000514:	f001 f98b 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2120      	movs	r1, #32
 800051c:	4810      	ldr	r0, [pc, #64]	; (8000560 <led_blink_sequence+0xc4>)
 800051e:	f001 f986 	bl	800182e <HAL_GPIO_WritePin>
		count_led_seq = 3;
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <led_blink_sequence+0xc0>)
 8000524:	2203      	movs	r2, #3
 8000526:	701a      	strb	r2, [r3, #0]
}
 8000528:	e015      	b.n	8000556 <led_blink_sequence+0xba>
	} else if (count_led_seq == 3)
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <led_blink_sequence+0xc0>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b03      	cmp	r3, #3
 8000530:	d111      	bne.n	8000556 <led_blink_sequence+0xba>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2108      	movs	r1, #8
 8000536:	480a      	ldr	r0, [pc, #40]	; (8000560 <led_blink_sequence+0xc4>)
 8000538:	f001 f979 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2110      	movs	r1, #16
 8000540:	4807      	ldr	r0, [pc, #28]	; (8000560 <led_blink_sequence+0xc4>)
 8000542:	f001 f974 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	4805      	ldr	r0, [pc, #20]	; (8000560 <led_blink_sequence+0xc4>)
 800054c:	f001 f96f 	bl	800182e <HAL_GPIO_WritePin>
		count_led_seq = 0;
 8000550:	4b02      	ldr	r3, [pc, #8]	; (800055c <led_blink_sequence+0xc0>)
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200001d7 	.word	0x200001d7
 8000560:	40010c00 	.word	0x40010c00

08000564 <led_blink_alternate>:

void led_blink_alternate(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	if(count_led_alt == 0)
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <led_blink_alternate+0x64>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d112      	bne.n	8000596 <led_blink_alternate+0x32>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_SET); //off
 8000570:	2201      	movs	r2, #1
 8000572:	2108      	movs	r1, #8
 8000574:	4815      	ldr	r0, [pc, #84]	; (80005cc <led_blink_alternate+0x68>)
 8000576:	f001 f95a 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_RESET); //on
 800057a:	2200      	movs	r2, #0
 800057c:	2110      	movs	r1, #16
 800057e:	4813      	ldr	r0, [pc, #76]	; (80005cc <led_blink_alternate+0x68>)
 8000580:	f001 f955 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_SET); //off
 8000584:	2201      	movs	r2, #1
 8000586:	2120      	movs	r1, #32
 8000588:	4810      	ldr	r0, [pc, #64]	; (80005cc <led_blink_alternate+0x68>)
 800058a:	f001 f950 	bl	800182e <HAL_GPIO_WritePin>
		count_led_alt = 1;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <led_blink_alternate+0x64>)
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET); //on
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET); //off
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET); //on
		count_led_alt = 0;
	}
}
 8000594:	e015      	b.n	80005c2 <led_blink_alternate+0x5e>
	} else if (count_led_alt == 1)
 8000596:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <led_blink_alternate+0x64>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d111      	bne.n	80005c2 <led_blink_alternate+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,GPIO_PIN_RESET); //on
 800059e:	2200      	movs	r2, #0
 80005a0:	2108      	movs	r1, #8
 80005a2:	480a      	ldr	r0, [pc, #40]	; (80005cc <led_blink_alternate+0x68>)
 80005a4:	f001 f943 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,GPIO_PIN_SET); //off
 80005a8:	2201      	movs	r2, #1
 80005aa:	2110      	movs	r1, #16
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <led_blink_alternate+0x68>)
 80005ae:	f001 f93e 	bl	800182e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,GPIO_PIN_RESET); //on
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <led_blink_alternate+0x68>)
 80005b8:	f001 f939 	bl	800182e <HAL_GPIO_WritePin>
		count_led_alt = 0;
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <led_blink_alternate+0x64>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200001d6 	.word	0x200001d6
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fbc8 	bl	8000d68 <HAL_Init>

  /* USER CODE BEGIN Init */
  led_eff_state = LED_BLINK_ORIGIN; //ke tu luc chuong trinh bat dau se vao hieu ung blink led
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <main+0x5c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f833 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f93d 	bl	8000860 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005e6:	f000 f911 	bl	800080c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80005ea:	f000 f873 	bl	80006d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005ee:	f000 f8bf 	bl	8000770 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <main+0x60>)
 80005f4:	f001 fd94 	bl	8002120 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80005f8:	480e      	ldr	r0, [pc, #56]	; (8000634 <main+0x64>)
 80005fa:	f001 fd91 	bl	8002120 <HAL_TIM_Base_Start_IT>
  while (1)
  {
	//----- Phan code test debug UART gui den man hinh OLED ----
	//clear buffer string before write below:
	//-- code
	sprintf((char*)Tx_Buffer,"\nCYCLE:%u\nMODE:%u",max_cycle_led_time,led_eff_state);
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <main+0x68>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <main+0x5c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	490c      	ldr	r1, [pc, #48]	; (800063c <main+0x6c>)
 800060a:	480d      	ldr	r0, [pc, #52]	; (8000640 <main+0x70>)
 800060c:	f002 ff8c 	bl	8003528 <siprintf>
	HAL_UART_Transmit(&huart1,Tx_Buffer,sizeof(Tx_Buffer), 10);
 8000610:	230a      	movs	r3, #10
 8000612:	2264      	movs	r2, #100	; 0x64
 8000614:	490a      	ldr	r1, [pc, #40]	; (8000640 <main+0x70>)
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <main+0x74>)
 8000618:	f002 f980 	bl	800291c <HAL_UART_Transmit>
	//----- Phan code test debug UART gui den man hinh OLED -----
	button1_handle();
 800061c:	f7ff fd96 	bl	800014c <button1_handle>
	button2_handle();
 8000620:	f7ff fe0e 	bl	8000240 <button2_handle>

	HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f000 fc01 	bl	8000e2c <HAL_Delay>
	sprintf((char*)Tx_Buffer,"\nCYCLE:%u\nMODE:%u",max_cycle_led_time,led_eff_state);
 800062a:	e7e8      	b.n	80005fe <main+0x2e>
 800062c:	2000016c 	.word	0x2000016c
 8000630:	20000094 	.word	0x20000094
 8000634:	200000dc 	.word	0x200000dc
 8000638:	20000000 	.word	0x20000000
 800063c:	08003e34 	.word	0x08003e34
 8000640:	20000170 	.word	0x20000170
 8000644:	20000124 	.word	0x20000124

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b090      	sub	sp, #64	; 0x40
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2228      	movs	r2, #40	; 0x28
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 ff5e 	bl	8003518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066a:	2301      	movs	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000686:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0318 	add.w	r3, r7, #24
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f8e5 	bl	8001860 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800069c:	f000 f9e0 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fb52 	bl	8001d64 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006c6:	f000 f9cb 	bl	8000a60 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3740      	adds	r7, #64	; 0x40
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_TIM3_Init+0x94>)
 80006f2:	4a1e      	ldr	r2, [pc, #120]	; (800076c <MX_TIM3_Init+0x98>)
 80006f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3599;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_TIM3_Init+0x94>)
 80006f8:	f640 620f 	movw	r2, #3599	; 0xe0f
 80006fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_TIM3_Init+0x94>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = led_TIM_counter;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_TIM3_Init+0x94>)
 8000706:	2209      	movs	r2, #9
 8000708:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_TIM3_Init+0x94>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_TIM3_Init+0x94>)
 8000712:	2280      	movs	r2, #128	; 0x80
 8000714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000716:	4814      	ldr	r0, [pc, #80]	; (8000768 <MX_TIM3_Init+0x94>)
 8000718:	f001 fcb2 	bl	8002080 <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000722:	f000 f99d 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4619      	mov	r1, r3
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_TIM3_Init+0x94>)
 8000734:	f001 fe4e 	bl	80023d4 <HAL_TIM_ConfigClockSource>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f98f 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_TIM3_Init+0x94>)
 8000750:	f002 f824 	bl	800279c <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800075a:	f000 f981 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000094 	.word	0x20000094
 800076c:	40000400 	.word	0x40000400

08000770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_TIM4_Init+0x94>)
 800078e:	4a1e      	ldr	r2, [pc, #120]	; (8000808 <MX_TIM4_Init+0x98>)
 8000790:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3599;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_TIM4_Init+0x94>)
 8000794:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000798:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM4_Init+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = led_TIM_counter;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_TIM4_Init+0x94>)
 80007a2:	2209      	movs	r2, #9
 80007a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_TIM4_Init+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_TIM4_Init+0x94>)
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007b2:	4814      	ldr	r0, [pc, #80]	; (8000804 <MX_TIM4_Init+0x94>)
 80007b4:	f001 fc64 	bl	8002080 <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f94f 	bl	8000a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_TIM4_Init+0x94>)
 80007d0:	f001 fe00 	bl	80023d4 <HAL_TIM_ConfigClockSource>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 f941 	bl	8000a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_TIM4_Init+0x94>)
 80007ec:	f001 ffd6 	bl	800279c <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80007f6:	f000 f933 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000dc 	.word	0x200000dc
 8000808:	40000800 	.word	0x40000800

0800080c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART1_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART1_UART_Init+0x4c>)
 8000844:	f002 f81a 	bl	800287c <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f907 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000124 	.word	0x20000124
 800085c:	40013800 	.word	0x40013800

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	4b23      	ldr	r3, [pc, #140]	; (8000904 <MX_GPIO_Init+0xa4>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a22      	ldr	r2, [pc, #136]	; (8000904 <MX_GPIO_Init+0xa4>)
 800087a:	f043 0320 	orr.w	r3, r3, #32
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b20      	ldr	r3, [pc, #128]	; (8000904 <MX_GPIO_Init+0xa4>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0320 	and.w	r3, r3, #32
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_GPIO_Init+0xa4>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_GPIO_Init+0xa4>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_GPIO_Init+0xa4>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0308 	and.w	r3, r3, #8
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_GPIO_Init+0xa4>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a16      	ldr	r2, [pc, #88]	; (8000904 <MX_GPIO_Init+0xa4>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_GPIO_Init+0xa4>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDR_Pin|LEDG_Pin|LEDB_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2138      	movs	r1, #56	; 0x38
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <MX_GPIO_Init+0xa8>)
 80008c2:	f000 ffb4 	bl	800182e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80008c6:	2303      	movs	r3, #3
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0xa8>)
 80008da:	f000 fe0d 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin LEDB_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin|LEDB_Pin;
 80008de:	2338      	movs	r3, #56	; 0x38
 80008e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4619      	mov	r1, r3
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_GPIO_Init+0xa8>)
 80008f6:	f000 fdff 	bl	80014f8 <HAL_GPIO_Init>

}
 80008fa:	bf00      	nop
 80008fc:	3720      	adds	r7, #32
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000
 8000908:	40010c00 	.word	0x40010c00

0800090c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //!WARNING: Don't change
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	if(htim == &htim3) //behavior led function timer
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a48      	ldr	r2, [pc, #288]	; (8000a38 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d164      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0xda>
	{
		if(led_timer_cnt > max_cycle_led_time)
 800091c:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800091e:	881a      	ldrh	r2, [r3, #0]
 8000920:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000922:	881b      	ldrh	r3, [r3, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d903      	bls.n	8000930 <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			led_timer_cnt = 0; //reset timer when timer over counter value
 8000928:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800092a:	2200      	movs	r2, #0
 800092c:	801a      	strh	r2, [r3, #0]
 800092e:	e05a      	b.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0xda>
		} //handle for overflow timer case - temporary solution
		else {
			led_timer_cnt++;
 8000930:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	b29a      	uxth	r2, r3
 8000938:	4b40      	ldr	r3, [pc, #256]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800093a:	801a      	strh	r2, [r3, #0]
			if(max_cycle_led_time > 0)
 800093c:	4b40      	ldr	r3, [pc, #256]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d040      	beq.n	80009c6 <HAL_TIM_PeriodElapsedCallback+0xba>
			{
				switch(led_eff_state)
 8000944:	4b3f      	ldr	r3, [pc, #252]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b02      	cmp	r3, #2
 800094a:	d02a      	beq.n	80009a2 <HAL_TIM_PeriodElapsedCallback+0x96>
 800094c:	2b02      	cmp	r3, #2
 800094e:	dc43      	bgt.n	80009d8 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8000950:	2b00      	cmp	r3, #0
 8000952:	d002      	beq.n	800095a <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000954:	2b01      	cmp	r3, #1
 8000956:	d012      	beq.n	800097e <HAL_TIM_PeriodElapsedCallback+0x72>
							led_timer_cnt = 0;
						}
						break;
					}
					default:
						break;
 8000958:	e03e      	b.n	80009d8 <HAL_TIM_PeriodElapsedCallback+0xcc>
						divine_time_val = max_cycle_led_time / 2;
 800095a:	4b39      	ldr	r3, [pc, #228]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	085b      	lsrs	r3, r3, #1
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b39      	ldr	r3, [pc, #228]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000964:	801a      	strh	r2, [r3, #0]
						if(led_timer_cnt == divine_time_val){
 8000966:	4b35      	ldr	r3, [pc, #212]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000968:	881a      	ldrh	r2, [r3, #0]
 800096a:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	429a      	cmp	r2, r3
 8000970:	d134      	bne.n	80009dc <HAL_TIM_PeriodElapsedCallback+0xd0>
							led_blink_origin();
 8000972:	f7ff fd5d 	bl	8000430 <led_blink_origin>
							led_timer_cnt = 0;
 8000976:	4b31      	ldr	r3, [pc, #196]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000978:	2200      	movs	r2, #0
 800097a:	801a      	strh	r2, [r3, #0]
					break;
 800097c:	e02e      	b.n	80009dc <HAL_TIM_PeriodElapsedCallback+0xd0>
						divine_time_val = max_cycle_led_time / 4;
 800097e:	4b30      	ldr	r3, [pc, #192]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000988:	801a      	strh	r2, [r3, #0]
						if(led_timer_cnt == divine_time_val){
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800098c:	881a      	ldrh	r2, [r3, #0]
 800098e:	4b2e      	ldr	r3, [pc, #184]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	429a      	cmp	r2, r3
 8000994:	d124      	bne.n	80009e0 <HAL_TIM_PeriodElapsedCallback+0xd4>
							led_blink_sequence();
 8000996:	f7ff fd81 	bl	800049c <led_blink_sequence>
							led_timer_cnt = 0;
 800099a:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 800099c:	2200      	movs	r2, #0
 800099e:	801a      	strh	r2, [r3, #0]
						break;
 80009a0:	e01e      	b.n	80009e0 <HAL_TIM_PeriodElapsedCallback+0xd4>
						divine_time_val = max_cycle_led_time / 2;
 80009a2:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	085b      	lsrs	r3, r3, #1
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80009ac:	801a      	strh	r2, [r3, #0]
						if(led_timer_cnt == divine_time_val){
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80009b0:	881a      	ldrh	r2, [r3, #0]
 80009b2:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d114      	bne.n	80009e4 <HAL_TIM_PeriodElapsedCallback+0xd8>
							led_blink_alternate();
 80009ba:	f7ff fdd3 	bl	8000564 <led_blink_alternate>
							led_timer_cnt = 0;
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	801a      	strh	r2, [r3, #0]
						break;
 80009c4:	e00e      	b.n	80009e4 <HAL_TIM_PeriodElapsedCallback+0xd8>
				}
			} else if(max_cycle_led_time == 0)
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10b      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0xda>
			{
				max_cycle_led_time = 2000; //neu chu ky bi nut bam tuong tac giam ve 0 thi reset lai thoi gian chu ky
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80009d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009d4:	801a      	strh	r2, [r3, #0]
 80009d6:	e006      	b.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0xda>
						break;
 80009d8:	bf00      	nop
 80009da:	e004      	b.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0xda>
					break;
 80009dc:	bf00      	nop
 80009de:	e002      	b.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0xda>
						break;
 80009e0:	bf00      	nop
 80009e2:	e000      	b.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0xda>
						break;
 80009e4:	bf00      	nop
			}
		}
	}
	if(htim == &htim4 && (is_long_press1==1 || is_long_press2==1))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d11f      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x122>
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d003      	beq.n	80009fe <HAL_TIM_PeriodElapsedCallback+0xf2>
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d117      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x122>
	{
		//is_press_time_count++;
		if(is_press_time_count++ == 200)
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	b291      	uxth	r1, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000a08:	8011      	strh	r1, [r2, #0]
 8000a0a:	2bc8      	cmp	r3, #200	; 0xc8
 8000a0c:	d10f      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x122>
		{
			is_press_time_count = 0;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	801a      	strh	r2, [r3, #0]
			if(cycle_change_mode == 0) {
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x116>
				time_cycle_dec_callback();
 8000a1c:	f7ff fcf2 	bl	8000404 <time_cycle_dec_callback>
			} else if(cycle_change_mode == 1){
				time_cycle_inc_callback();
			}
		}
	}
}
 8000a20:	e005      	b.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x122>
			} else if(cycle_change_mode == 1){
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d101      	bne.n	8000a2e <HAL_TIM_PeriodElapsedCallback+0x122>
				time_cycle_inc_callback();
 8000a2a:	f7ff fcd5 	bl	80003d8 <time_cycle_inc_callback>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000094 	.word	0x20000094
 8000a3c:	200001f6 	.word	0x200001f6
 8000a40:	20000000 	.word	0x20000000
 8000a44:	2000016c 	.word	0x2000016c
 8000a48:	200001d4 	.word	0x200001d4
 8000a4c:	200000dc 	.word	0x200000dc
 8000a50:	200001e5 	.word	0x200001e5
 8000a54:	200001f1 	.word	0x200001f1
 8000a58:	200001f4 	.word	0x200001f4
 8000a5c:	200001f2 	.word	0x200001f2

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <HAL_MspInit+0x6c>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <HAL_MspInit+0x6c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6193      	str	r3, [r2, #24]
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_MspInit+0x6c>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60bb      	str	r3, [r7, #8]
 8000a88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <HAL_MspInit+0x6c>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <HAL_MspInit+0x6c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_MspInit+0x6c>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2004      	movs	r0, #4
 8000aa8:	f000 fabb 	bl	8001022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000aac:	2004      	movs	r0, #4
 8000aae:	f000 fad4 	bl	800105a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_MspInit+0x70>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_MspInit+0x70>)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010000 	.word	0x40010000

08000ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <HAL_TIM_Base_MspInit+0x78>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d114      	bne.n	8000b1c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_TIM_Base_MspInit+0x7c>)
 8000af4:	69db      	ldr	r3, [r3, #28]
 8000af6:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_TIM_Base_MspInit+0x7c>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	61d3      	str	r3, [r2, #28]
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <HAL_TIM_Base_MspInit+0x7c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	201d      	movs	r0, #29
 8000b10:	f000 fa87 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b14:	201d      	movs	r0, #29
 8000b16:	f000 faa0 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b1a:	e018      	b.n	8000b4e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <HAL_TIM_Base_MspInit+0x80>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d113      	bne.n	8000b4e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_TIM_Base_MspInit+0x7c>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <HAL_TIM_Base_MspInit+0x7c>)
 8000b2c:	f043 0304 	orr.w	r3, r3, #4
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_TIM_Base_MspInit+0x7c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	201e      	movs	r0, #30
 8000b44:	f000 fa6d 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b48:	201e      	movs	r0, #30
 8000b4a:	f000 fa86 	bl	800105a <HAL_NVIC_EnableIRQ>
}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40000400 	.word	0x40000400
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40000800 	.word	0x40000800

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a20      	ldr	r2, [pc, #128]	; (8000c00 <HAL_UART_MspInit+0x9c>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d139      	bne.n	8000bf8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <HAL_UART_MspInit+0xa0>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <HAL_UART_MspInit+0xa0>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <HAL_UART_MspInit+0xa0>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_UART_MspInit+0xa0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <HAL_UART_MspInit+0xa0>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_UART_MspInit+0xa0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480f      	ldr	r0, [pc, #60]	; (8000c08 <HAL_UART_MspInit+0xa4>)
 8000bca:	f000 fc95 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4619      	mov	r1, r3
 8000be2:	4809      	ldr	r0, [pc, #36]	; (8000c08 <HAL_UART_MspInit+0xa4>)
 8000be4:	f000 fc88 	bl	80014f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2025      	movs	r0, #37	; 0x25
 8000bee:	f000 fa18 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bf2:	2025      	movs	r0, #37	; 0x25
 8000bf4:	f000 fa31 	bl	800105a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40013800 	.word	0x40013800
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40010800 	.word	0x40010800

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <NMI_Handler+0x4>

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr

08000c4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c52:	f000 f8cf 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000c5e:	f000 fac9 	bl	80011f4 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM3_IRQHandler+0x10>)
 8000c6e:	f001 faa9 	bl	80021c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000094 	.word	0x20000094

08000c7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <TIM4_IRQHandler+0x10>)
 8000c82:	f001 fa9f 	bl	80021c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000dc 	.word	0x200000dc

08000c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <USART1_IRQHandler+0x10>)
 8000c96:	f001 fec5 	bl	8002a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000124 	.word	0x20000124

08000ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <_sbrk+0x5c>)
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <_sbrk+0x60>)
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <_sbrk+0x64>)
 8000cc2:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <_sbrk+0x68>)
 8000cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d207      	bcs.n	8000ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd4:	f002 fbf6 	bl	80034c4 <__errno>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	220c      	movs	r2, #12
 8000cdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	e009      	b.n	8000cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <_sbrk+0x64>)
 8000cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20005000 	.word	0x20005000
 8000d04:	00000400 	.word	0x00000400
 8000d08:	200001f8 	.word	0x200001f8
 8000d0c:	20000230 	.word	0x20000230

08000d10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d1c:	f7ff fff8 	bl	8000d10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480b      	ldr	r0, [pc, #44]	; (8000d50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d22:	490c      	ldr	r1, [pc, #48]	; (8000d54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d24:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d38:	4c09      	ldr	r4, [pc, #36]	; (8000d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f002 fbc3 	bl	80034d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4a:	f7ff fc41 	bl	80005d0 <main>
  bx lr
 8000d4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d58:	08003eb0 	.word	0x08003eb0
  ldr r2, =_sbss
 8000d5c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d60:	20000230 	.word	0x20000230

08000d64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_2_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x28>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x28>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f947 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe72 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40022000 	.word	0x40022000

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f95f 	bl	8001076 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f927 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000010 	.word	0x20000010
 8000df0:	2000000c 	.word	0x2000000c

08000df4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_IncTick+0x1c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_IncTick+0x20>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <HAL_IncTick+0x20>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000010 	.word	0x20000010
 8000e14:	200001fc 	.word	0x200001fc

08000e18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b02      	ldr	r3, [pc, #8]	; (8000e28 <HAL_GetTick+0x10>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	200001fc 	.word	0x200001fc

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff fff0 	bl	8000e18 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffe0 	bl	8000e18 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000010 	.word	0x20000010

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4906      	ldr	r1, [pc, #24]	; (8000f0c <__NVIC_EnableIRQ+0x34>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff90 	bl	8000f10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff2d 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff42 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff90 	bl	8000f64 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5f 	bl	8000f10 <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff35 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ffa2 	bl	8000fc8 <SysTick_Config>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d008      	beq.n	80010b8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2204      	movs	r2, #4
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e020      	b.n	80010fa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 020e 	bic.w	r2, r2, #14
 80010c6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e0:	2101      	movs	r1, #1
 80010e2:	fa01 f202 	lsl.w	r2, r1, r2
 80010e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d005      	beq.n	8001128 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e051      	b.n	80011cc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 020e 	bic.w	r2, r2, #14
 8001136:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_DMA_Abort_IT+0xd4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d029      	beq.n	80011a6 <HAL_DMA_Abort_IT+0xa2>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a21      	ldr	r2, [pc, #132]	; (80011dc <HAL_DMA_Abort_IT+0xd8>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d022      	beq.n	80011a2 <HAL_DMA_Abort_IT+0x9e>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <HAL_DMA_Abort_IT+0xdc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d01a      	beq.n	800119c <HAL_DMA_Abort_IT+0x98>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_DMA_Abort_IT+0xe0>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d012      	beq.n	8001196 <HAL_DMA_Abort_IT+0x92>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <HAL_DMA_Abort_IT+0xe4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00a      	beq.n	8001190 <HAL_DMA_Abort_IT+0x8c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_DMA_Abort_IT+0xe8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d102      	bne.n	800118a <HAL_DMA_Abort_IT+0x86>
 8001184:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001188:	e00e      	b.n	80011a8 <HAL_DMA_Abort_IT+0xa4>
 800118a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800118e:	e00b      	b.n	80011a8 <HAL_DMA_Abort_IT+0xa4>
 8001190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001194:	e008      	b.n	80011a8 <HAL_DMA_Abort_IT+0xa4>
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	e005      	b.n	80011a8 <HAL_DMA_Abort_IT+0xa4>
 800119c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a0:	e002      	b.n	80011a8 <HAL_DMA_Abort_IT+0xa4>
 80011a2:	2310      	movs	r3, #16
 80011a4:	e000      	b.n	80011a8 <HAL_DMA_Abort_IT+0xa4>
 80011a6:	2301      	movs	r3, #1
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_DMA_Abort_IT+0xec>)
 80011aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	4798      	blx	r3
    } 
  }
  return status;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40020008 	.word	0x40020008
 80011dc:	4002001c 	.word	0x4002001c
 80011e0:	40020030 	.word	0x40020030
 80011e4:	40020044 	.word	0x40020044
 80011e8:	40020058 	.word	0x40020058
 80011ec:	4002006c 	.word	0x4002006c
 80011f0:	40020000 	.word	0x40020000

080011f4 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011fe:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <HAL_FLASH_IRQHandler+0x22>
 800120a:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00e      	beq.n	8001234 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8001216:	4b68      	ldr	r3, [pc, #416]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 800121c:	4b66      	ldr	r3, [pc, #408]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 800121e:	f04f 32ff 	mov.w	r2, #4294967295
 8001222:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8001224:	f000 f8f8 	bl	8001418 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f8d0 	bl	80013ce <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800122e:	4b62      	ldr	r3, [pc, #392]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001234:	4b5f      	ldr	r3, [pc, #380]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 80a0 	beq.w	8001382 <HAL_FLASH_IRQHandler+0x18e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001242:	4b5c      	ldr	r3, [pc, #368]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 8001244:	2220      	movs	r2, #32
 8001246:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8001248:	4b5b      	ldr	r3, [pc, #364]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8097 	beq.w	8001382 <HAL_FLASH_IRQHandler+0x18e>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8001254:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d12d      	bne.n	80012ba <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 800125e:	4b56      	ldr	r3, [pc, #344]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	4a54      	ldr	r2, [pc, #336]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001266:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d017      	beq.n	80012a0 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8001270:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f8a0 	bl	80013bc <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 800127c:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001284:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8001286:	4a4c      	ldr	r2, [pc, #304]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800128c:	4b49      	ldr	r3, [pc, #292]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	4a48      	ldr	r2, [pc, #288]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 8001292:	f023 0302 	bic.w	r3, r3, #2
 8001296:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f90d 	bl	80014b8 <FLASH_PageErase>
 800129e:	e070      	b.n	8001382 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4a44      	ldr	r2, [pc, #272]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80012ac:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f882 	bl	80013bc <HAL_FLASH_EndOfOperationCallback>
 80012b8:	e063      	b.n	8001382 <HAL_FLASH_IRQHandler+0x18e>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80012ba:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d10c      	bne.n	80012de <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	4a3a      	ldr	r2, [pc, #232]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 80012ca:	f023 0304 	bic.w	r3, r3, #4
 80012ce:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f000 f873 	bl	80013bc <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e051      	b.n	8001382 <HAL_FLASH_IRQHandler+0x18e>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	4a34      	ldr	r2, [pc, #208]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80012e6:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 80012e8:	4b33      	ldr	r3, [pc, #204]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d024      	beq.n	800133a <HAL_FLASH_IRQHandler+0x146>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 80012f0:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	3302      	adds	r3, #2
 80012f6:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80012f8:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 80012fa:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8001300:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001302:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	0c02      	lsrs	r2, r0, #16
 8001310:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001314:	0c0b      	lsrs	r3, r1, #16
 8001316:	4928      	ldr	r1, [pc, #160]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001318:	e9c1 2304 	strd	r2, r3, [r1, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	4a24      	ldr	r2, [pc, #144]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 800132a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800132e:	b293      	uxth	r3, r2
 8001330:	4619      	mov	r1, r3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f854 	bl	80013e0 <FLASH_Program_HalfWord>
 8001338:	e023      	b.n	8001382 <HAL_FLASH_IRQHandler+0x18e>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b03      	cmp	r3, #3
 8001342:	d105      	bne.n	8001350 <HAL_FLASH_IRQHandler+0x15c>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f837 	bl	80013bc <HAL_FLASH_EndOfOperationCallback>
 800134e:	e011      	b.n	8001374 <HAL_FLASH_IRQHandler+0x180>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b04      	cmp	r3, #4
 8001358:	d106      	bne.n	8001368 <HAL_FLASH_IRQHandler+0x174>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	3b02      	subs	r3, #2
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f82b 	bl	80013bc <HAL_FLASH_EndOfOperationCallback>
 8001366:	e005      	b.n	8001374 <HAL_FLASH_IRQHandler+0x180>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	3b06      	subs	r3, #6
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f824 	bl	80013bc <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001376:	f04f 32ff 	mov.w	r2, #4294967295
 800137a:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10e      	bne.n	80013aa <HAL_FLASH_IRQHandler+0x1b6>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 8001392:	f023 0307 	bic.w	r3, r3, #7
 8001396:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <HAL_FLASH_IRQHandler+0x1c0>)
 800139e:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80013a2:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_FLASH_IRQHandler+0x1c4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	761a      	strb	r2, [r3, #24]
  }
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40022000 	.word	0x40022000
 80013b8:	20000200 	.word	0x20000200

080013bc <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr

080013ce <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <FLASH_Program_HalfWord+0x30>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <FLASH_Program_HalfWord+0x34>)
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	4a07      	ldr	r2, [pc, #28]	; (8001414 <FLASH_Program_HalfWord+0x34>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	887a      	ldrh	r2, [r7, #2]
 8001402:	801a      	strh	r2, [r3, #0]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000200 	.word	0x20000200
 8001414:	40022000 	.word	0x40022000

08001418 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001438:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d009      	beq.n	8001462 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001458:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800146e:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <FLASH_SetErrorCode+0x9c>)
 8001478:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001480:	f023 0301 	bic.w	r3, r3, #1
 8001484:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f240 1201 	movw	r2, #257	; 0x101
 800148c:	4293      	cmp	r3, r2
 800148e:	d106      	bne.n	800149e <FLASH_SetErrorCode+0x86>
 8001490:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	61d3      	str	r3, [r2, #28]
}  
 800149c:	e002      	b.n	80014a4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <FLASH_SetErrorCode+0x98>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	60d3      	str	r3, [r2, #12]
}  
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40022000 	.word	0x40022000
 80014b4:	20000200 	.word	0x20000200

080014b8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <FLASH_PageErase+0x38>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <FLASH_PageErase+0x3c>)
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <FLASH_PageErase+0x3c>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <FLASH_PageErase+0x3c>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80014d8:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <FLASH_PageErase+0x3c>)
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <FLASH_PageErase+0x3c>)
 80014de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000200 	.word	0x20000200
 80014f4:	40022000 	.word	0x40022000

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b08b      	sub	sp, #44	; 0x2c
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	e169      	b.n	80017e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800150c:	2201      	movs	r2, #1
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	429a      	cmp	r2, r3
 8001526:	f040 8158 	bne.w	80017da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a9a      	ldr	r2, [pc, #616]	; (8001798 <HAL_GPIO_Init+0x2a0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d05e      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
 8001534:	4a98      	ldr	r2, [pc, #608]	; (8001798 <HAL_GPIO_Init+0x2a0>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d875      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 800153a:	4a98      	ldr	r2, [pc, #608]	; (800179c <HAL_GPIO_Init+0x2a4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d058      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
 8001540:	4a96      	ldr	r2, [pc, #600]	; (800179c <HAL_GPIO_Init+0x2a4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d86f      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 8001546:	4a96      	ldr	r2, [pc, #600]	; (80017a0 <HAL_GPIO_Init+0x2a8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d052      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
 800154c:	4a94      	ldr	r2, [pc, #592]	; (80017a0 <HAL_GPIO_Init+0x2a8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d869      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 8001552:	4a94      	ldr	r2, [pc, #592]	; (80017a4 <HAL_GPIO_Init+0x2ac>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d04c      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
 8001558:	4a92      	ldr	r2, [pc, #584]	; (80017a4 <HAL_GPIO_Init+0x2ac>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d863      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 800155e:	4a92      	ldr	r2, [pc, #584]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d046      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
 8001564:	4a90      	ldr	r2, [pc, #576]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d85d      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 800156a:	2b12      	cmp	r3, #18
 800156c:	d82a      	bhi.n	80015c4 <HAL_GPIO_Init+0xcc>
 800156e:	2b12      	cmp	r3, #18
 8001570:	d859      	bhi.n	8001626 <HAL_GPIO_Init+0x12e>
 8001572:	a201      	add	r2, pc, #4	; (adr r2, 8001578 <HAL_GPIO_Init+0x80>)
 8001574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001578:	080015f3 	.word	0x080015f3
 800157c:	080015cd 	.word	0x080015cd
 8001580:	080015df 	.word	0x080015df
 8001584:	08001621 	.word	0x08001621
 8001588:	08001627 	.word	0x08001627
 800158c:	08001627 	.word	0x08001627
 8001590:	08001627 	.word	0x08001627
 8001594:	08001627 	.word	0x08001627
 8001598:	08001627 	.word	0x08001627
 800159c:	08001627 	.word	0x08001627
 80015a0:	08001627 	.word	0x08001627
 80015a4:	08001627 	.word	0x08001627
 80015a8:	08001627 	.word	0x08001627
 80015ac:	08001627 	.word	0x08001627
 80015b0:	08001627 	.word	0x08001627
 80015b4:	08001627 	.word	0x08001627
 80015b8:	08001627 	.word	0x08001627
 80015bc:	080015d5 	.word	0x080015d5
 80015c0:	080015e9 	.word	0x080015e9
 80015c4:	4a79      	ldr	r2, [pc, #484]	; (80017ac <HAL_GPIO_Init+0x2b4>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ca:	e02c      	b.n	8001626 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	623b      	str	r3, [r7, #32]
          break;
 80015d2:	e029      	b.n	8001628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	3304      	adds	r3, #4
 80015da:	623b      	str	r3, [r7, #32]
          break;
 80015dc:	e024      	b.n	8001628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	3308      	adds	r3, #8
 80015e4:	623b      	str	r3, [r7, #32]
          break;
 80015e6:	e01f      	b.n	8001628 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	330c      	adds	r3, #12
 80015ee:	623b      	str	r3, [r7, #32]
          break;
 80015f0:	e01a      	b.n	8001628 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015fa:	2304      	movs	r3, #4
 80015fc:	623b      	str	r3, [r7, #32]
          break;
 80015fe:	e013      	b.n	8001628 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d105      	bne.n	8001614 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001608:	2308      	movs	r3, #8
 800160a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	611a      	str	r2, [r3, #16]
          break;
 8001612:	e009      	b.n	8001628 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001614:	2308      	movs	r3, #8
 8001616:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	615a      	str	r2, [r3, #20]
          break;
 800161e:	e003      	b.n	8001628 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001620:	2300      	movs	r3, #0
 8001622:	623b      	str	r3, [r7, #32]
          break;
 8001624:	e000      	b.n	8001628 <HAL_GPIO_Init+0x130>
          break;
 8001626:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2bff      	cmp	r3, #255	; 0xff
 800162c:	d801      	bhi.n	8001632 <HAL_GPIO_Init+0x13a>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	e001      	b.n	8001636 <HAL_GPIO_Init+0x13e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	3304      	adds	r3, #4
 8001636:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2bff      	cmp	r3, #255	; 0xff
 800163c:	d802      	bhi.n	8001644 <HAL_GPIO_Init+0x14c>
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x152>
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	3b08      	subs	r3, #8
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	210f      	movs	r1, #15
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	401a      	ands	r2, r3
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	431a      	orrs	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80b1 	beq.w	80017da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001678:	4b4d      	ldr	r3, [pc, #308]	; (80017b0 <HAL_GPIO_Init+0x2b8>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a4c      	ldr	r2, [pc, #304]	; (80017b0 <HAL_GPIO_Init+0x2b8>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <HAL_GPIO_Init+0x2b8>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001690:	4a48      	ldr	r2, [pc, #288]	; (80017b4 <HAL_GPIO_Init+0x2bc>)
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	220f      	movs	r2, #15
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4013      	ands	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a40      	ldr	r2, [pc, #256]	; (80017b8 <HAL_GPIO_Init+0x2c0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d013      	beq.n	80016e4 <HAL_GPIO_Init+0x1ec>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a3f      	ldr	r2, [pc, #252]	; (80017bc <HAL_GPIO_Init+0x2c4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d00d      	beq.n	80016e0 <HAL_GPIO_Init+0x1e8>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a3e      	ldr	r2, [pc, #248]	; (80017c0 <HAL_GPIO_Init+0x2c8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d007      	beq.n	80016dc <HAL_GPIO_Init+0x1e4>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a3d      	ldr	r2, [pc, #244]	; (80017c4 <HAL_GPIO_Init+0x2cc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_GPIO_Init+0x1e0>
 80016d4:	2303      	movs	r3, #3
 80016d6:	e006      	b.n	80016e6 <HAL_GPIO_Init+0x1ee>
 80016d8:	2304      	movs	r3, #4
 80016da:	e004      	b.n	80016e6 <HAL_GPIO_Init+0x1ee>
 80016dc:	2302      	movs	r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x1ee>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_GPIO_Init+0x1ee>
 80016e4:	2300      	movs	r3, #0
 80016e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e8:	f002 0203 	and.w	r2, r2, #3
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	4093      	lsls	r3, r2
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016f6:	492f      	ldr	r1, [pc, #188]	; (80017b4 <HAL_GPIO_Init+0x2bc>)
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	492c      	ldr	r1, [pc, #176]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800171e:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	43db      	mvns	r3, r3
 8001726:	4928      	ldr	r1, [pc, #160]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001728:	4013      	ands	r3, r2
 800172a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	60cb      	str	r3, [r1, #12]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	491e      	ldr	r1, [pc, #120]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001750:	4013      	ands	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4918      	ldr	r1, [pc, #96]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	4914      	ldr	r1, [pc, #80]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001778:	4013      	ands	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d021      	beq.n	80017cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	490e      	ldr	r1, [pc, #56]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	600b      	str	r3, [r1, #0]
 8001794:	e021      	b.n	80017da <HAL_GPIO_Init+0x2e2>
 8001796:	bf00      	nop
 8001798:	10320000 	.word	0x10320000
 800179c:	10310000 	.word	0x10310000
 80017a0:	10220000 	.word	0x10220000
 80017a4:	10210000 	.word	0x10210000
 80017a8:	10120000 	.word	0x10120000
 80017ac:	10110000 	.word	0x10110000
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40010000 	.word	0x40010000
 80017b8:	40010800 	.word	0x40010800
 80017bc:	40010c00 	.word	0x40010c00
 80017c0:	40011000 	.word	0x40011000
 80017c4:	40011400 	.word	0x40011400
 80017c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_GPIO_Init+0x304>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4909      	ldr	r1, [pc, #36]	; (80017fc <HAL_GPIO_Init+0x304>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	3301      	adds	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f47f ae8e 	bne.w	800150c <HAL_GPIO_Init+0x14>
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	372c      	adds	r7, #44	; 0x2c
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	40010400 	.word	0x40010400

08001800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	887b      	ldrh	r3, [r7, #2]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001818:	2301      	movs	r3, #1
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	e001      	b.n	8001822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	807b      	strh	r3, [r7, #2]
 800183a:	4613      	mov	r3, r2
 800183c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183e:	787b      	ldrb	r3, [r7, #1]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800184a:	e003      	b.n	8001854 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800184c:	887b      	ldrh	r3, [r7, #2]
 800184e:	041a      	lsls	r2, r3, #16
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	611a      	str	r2, [r3, #16]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
	...

08001860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e272      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 8087 	beq.w	800198e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001880:	4b92      	ldr	r3, [pc, #584]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b04      	cmp	r3, #4
 800188a:	d00c      	beq.n	80018a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800188c:	4b8f      	ldr	r3, [pc, #572]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d112      	bne.n	80018be <HAL_RCC_OscConfig+0x5e>
 8001898:	4b8c      	ldr	r3, [pc, #560]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d10b      	bne.n	80018be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a6:	4b89      	ldr	r3, [pc, #548]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d06c      	beq.n	800198c <HAL_RCC_OscConfig+0x12c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d168      	bne.n	800198c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e24c      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x76>
 80018c8:	4b80      	ldr	r3, [pc, #512]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a7f      	ldr	r2, [pc, #508]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e02e      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x98>
 80018de:	4b7b      	ldr	r3, [pc, #492]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a7a      	ldr	r2, [pc, #488]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b78      	ldr	r3, [pc, #480]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a77      	ldr	r2, [pc, #476]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80018f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e01d      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0xbc>
 8001902:	4b72      	ldr	r3, [pc, #456]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a71      	ldr	r2, [pc, #452]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a6e      	ldr	r2, [pc, #440]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0xd4>
 800191c:	4b6b      	ldr	r3, [pc, #428]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a6a      	ldr	r2, [pc, #424]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b68      	ldr	r3, [pc, #416]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a67      	ldr	r2, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800192e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001932:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fa6c 	bl	8000e18 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001944:	f7ff fa68 	bl	8000e18 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e200      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0xe4>
 8001962:	e014      	b.n	800198e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fa58 	bl	8000e18 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fa54 	bl	8000e18 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e1ec      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	4b53      	ldr	r3, [pc, #332]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x10c>
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019a6:	4b49      	ldr	r3, [pc, #292]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 030c 	and.w	r3, r3, #12
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d11c      	bne.n	80019ec <HAL_RCC_OscConfig+0x18c>
 80019b2:	4b46      	ldr	r3, [pc, #280]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d116      	bne.n	80019ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	4b43      	ldr	r3, [pc, #268]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <HAL_RCC_OscConfig+0x176>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d001      	beq.n	80019d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e1c0      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d6:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4939      	ldr	r1, [pc, #228]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	e03a      	b.n	8001a62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fa0d 	bl	8000e18 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff fa09 	bl	8000e18 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1a1      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4927      	ldr	r1, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	600b      	str	r3, [r1, #0]
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_RCC_OscConfig+0x270>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f9ec 	bl	8000e18 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff f9e8 	bl	8000e18 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e180      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d03a      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d019      	beq.n	8001aaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_RCC_OscConfig+0x274>)
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff f9cc 	bl	8000e18 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a84:	f7ff f9c8 	bl	8000e18 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e160      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f000 face 	bl	8002044 <RCC_Delay>
 8001aa8:	e01c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_RCC_OscConfig+0x274>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff f9b2 	bl	8000e18 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab6:	e00f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab8:	f7ff f9ae 	bl	8000e18 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d908      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e146      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	42420000 	.word	0x42420000
 8001ad4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	4b92      	ldr	r3, [pc, #584]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1e9      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80a6 	beq.w	8001c3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af6:	4b8b      	ldr	r3, [pc, #556]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10d      	bne.n	8001b1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	4a87      	ldr	r2, [pc, #540]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	61d3      	str	r3, [r2, #28]
 8001b0e:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d118      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b7f      	ldr	r3, [pc, #508]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a7e      	ldr	r2, [pc, #504]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff f96f 	bl	8000e18 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7ff f96b 	bl	8000e18 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e103      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b75      	ldr	r3, [pc, #468]	; (8001d28 <HAL_RCC_OscConfig+0x4c8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x312>
 8001b64:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4a6e      	ldr	r2, [pc, #440]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6213      	str	r3, [r2, #32]
 8001b70:	e02d      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x334>
 8001b7a:	4b6a      	ldr	r3, [pc, #424]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a69      	ldr	r2, [pc, #420]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	4b67      	ldr	r3, [pc, #412]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a66      	ldr	r2, [pc, #408]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	e01c      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d10c      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x356>
 8001b9c:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a60      	ldr	r2, [pc, #384]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4a5d      	ldr	r2, [pc, #372]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6213      	str	r3, [r2, #32]
 8001bb4:	e00b      	b.n	8001bce <HAL_RCC_OscConfig+0x36e>
 8001bb6:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a5a      	ldr	r2, [pc, #360]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a57      	ldr	r2, [pc, #348]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f91f 	bl	8000e18 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff f91b 	bl	8000e18 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e0b1      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf4:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ee      	beq.n	8001bde <HAL_RCC_OscConfig+0x37e>
 8001c00:	e014      	b.n	8001c2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff f909 	bl	8000e18 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff f905 	bl	8000e18 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e09b      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c20:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ee      	bne.n	8001c0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d105      	bne.n	8001c3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c32:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a3b      	ldr	r2, [pc, #236]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8087 	beq.w	8001d56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d061      	beq.n	8001d18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d146      	bne.n	8001cea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff f8d9 	bl	8000e18 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff f8d5 	bl	8000e18 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e06d      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7c:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d108      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c92:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4921      	ldr	r1, [pc, #132]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a19      	ldr	r1, [r3, #32]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	491b      	ldr	r1, [pc, #108]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7ff f8a9 	bl	8000e18 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cca:	f7ff f8a5 	bl	8000e18 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e03d      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x46a>
 8001ce8:	e035      	b.n	8001d56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_RCC_OscConfig+0x4cc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f892 	bl	8000e18 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff f88e 	bl	8000e18 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e026      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x498>
 8001d16:	e01e      	b.n	8001d56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e019      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x500>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d001      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000

08001d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0d0      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d910      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 0207 	bic.w	r2, r3, #7
 8001d8e:	4965      	ldr	r1, [pc, #404]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b63      	ldr	r3, [pc, #396]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b8      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc0:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a58      	ldr	r2, [pc, #352]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a52      	ldr	r2, [pc, #328]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001de2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	494d      	ldr	r1, [pc, #308]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d040      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d115      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e07f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e073      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e06b      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e42:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f023 0203 	bic.w	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4936      	ldr	r1, [pc, #216]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e54:	f7fe ffe0 	bl	8000e18 <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7fe ffdc 	bl	8000e18 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e053      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 020c 	and.w	r2, r3, #12
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1eb      	bne.n	8001e5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d210      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 0207 	bic.w	r2, r3, #7
 8001e9a:	4922      	ldr	r1, [pc, #136]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e032      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4916      	ldr	r1, [pc, #88]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	490e      	ldr	r1, [pc, #56]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ef2:	f000 f821 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	490a      	ldr	r1, [pc, #40]	; (8001f2c <HAL_RCC_ClockConfig+0x1c8>)
 8001f04:	5ccb      	ldrb	r3, [r1, r3]
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1cc>)
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1d0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe ff3e 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	08003e48 	.word	0x08003e48
 8001f30:	20000008 	.word	0x20000008
 8001f34:	2000000c 	.word	0x2000000c

08001f38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d002      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x30>
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_GetSysClockFreq+0x36>
 8001f66:	e027      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f6a:	613b      	str	r3, [r7, #16]
      break;
 8001f6c:	e027      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	0c9b      	lsrs	r3, r3, #18
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f78:	5cd3      	ldrb	r3, [r2, r3]
 8001f7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d010      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f86:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	0c5b      	lsrs	r3, r3, #17
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f9a:	fb03 f202 	mul.w	r2, r3, r2
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e004      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	613b      	str	r3, [r7, #16]
      break;
 8001fb6:	e002      	b.n	8001fbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fba:	613b      	str	r3, [r7, #16]
      break;
 8001fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fbe:	693b      	ldr	r3, [r7, #16]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	007a1200 	.word	0x007a1200
 8001fd4:	08003e60 	.word	0x08003e60
 8001fd8:	08003e70 	.word	0x08003e70
 8001fdc:	003d0900 	.word	0x003d0900

08001fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	20000008 	.word	0x20000008

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff8:	f7ff fff2 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4903      	ldr	r1, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	08003e58 	.word	0x08003e58

0800201c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002020:	f7ff ffde 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	0adb      	lsrs	r3, r3, #11
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4903      	ldr	r1, [pc, #12]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000
 8002040:	08003e58 	.word	0x08003e58

08002044 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <RCC_Delay+0x34>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0a      	ldr	r2, [pc, #40]	; (800207c <RCC_Delay+0x38>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	0a5b      	lsrs	r3, r3, #9
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002060:	bf00      	nop
  }
  while (Delay --);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e5a      	subs	r2, r3, #1
 8002066:	60fa      	str	r2, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f9      	bne.n	8002060 <RCC_Delay+0x1c>
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr
 8002078:	20000008 	.word	0x20000008
 800207c:	10624dd3 	.word	0x10624dd3

08002080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e041      	b.n	8002116 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fd1a 	bl	8000ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f000 fa74 	bl	80025ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d001      	beq.n	8002138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e03a      	b.n	80021ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00e      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x58>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002162:	d009      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x58>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a14      	ldr	r2, [pc, #80]	; (80021bc <HAL_TIM_Base_Start_IT+0x9c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d004      	beq.n	8002178 <HAL_TIM_Base_Start_IT+0x58>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d111      	bne.n	800219c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b06      	cmp	r3, #6
 8002188:	d010      	beq.n	80021ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219a:	e007      	b.n	80021ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40000800 	.word	0x40000800

080021c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d122      	bne.n	8002220 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d11b      	bne.n	8002220 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0202 	mvn.w	r2, #2
 80021f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f9b4 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 800220c:	e005      	b.n	800221a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f9a7 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f9b6 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b04      	cmp	r3, #4
 800222c:	d122      	bne.n	8002274 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b04      	cmp	r3, #4
 800223a:	d11b      	bne.n	8002274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0204 	mvn.w	r2, #4
 8002244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f98a 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 8002260:	e005      	b.n	800226e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f97d 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f98c 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b08      	cmp	r3, #8
 8002280:	d122      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b08      	cmp	r3, #8
 800228e:	d11b      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0208 	mvn.w	r2, #8
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2204      	movs	r2, #4
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f960 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f953 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f962 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0310 	and.w	r3, r3, #16
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d122      	bne.n	800231c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d11b      	bne.n	800231c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0210 	mvn.w	r2, #16
 80022ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2208      	movs	r2, #8
 80022f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f936 	bl	8002574 <HAL_TIM_IC_CaptureCallback>
 8002308:	e005      	b.n	8002316 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f929 	bl	8002562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f938 	bl	8002586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b01      	cmp	r3, #1
 8002328:	d10e      	bne.n	8002348 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0201 	mvn.w	r2, #1
 8002340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fae2 	bl	800090c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b80      	cmp	r3, #128	; 0x80
 8002354:	d10e      	bne.n	8002374 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002360:	2b80      	cmp	r3, #128	; 0x80
 8002362:	d107      	bne.n	8002374 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fa7b 	bl	800286a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b40      	cmp	r3, #64	; 0x40
 8002380:	d10e      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	d107      	bne.n	80023a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8fc 	bl	8002598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d10e      	bne.n	80023cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	2b20      	cmp	r3, #32
 80023ba:	d107      	bne.n	80023cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0220 	mvn.w	r2, #32
 80023c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fa46 	bl	8002858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023cc:	bf00      	nop
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <HAL_TIM_ConfigClockSource+0x1c>
 80023ec:	2302      	movs	r3, #2
 80023ee:	e0b4      	b.n	800255a <HAL_TIM_ConfigClockSource+0x186>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800240e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002416:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002428:	d03e      	beq.n	80024a8 <HAL_TIM_ConfigClockSource+0xd4>
 800242a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242e:	f200 8087 	bhi.w	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002436:	f000 8086 	beq.w	8002546 <HAL_TIM_ConfigClockSource+0x172>
 800243a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243e:	d87f      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002440:	2b70      	cmp	r3, #112	; 0x70
 8002442:	d01a      	beq.n	800247a <HAL_TIM_ConfigClockSource+0xa6>
 8002444:	2b70      	cmp	r3, #112	; 0x70
 8002446:	d87b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002448:	2b60      	cmp	r3, #96	; 0x60
 800244a:	d050      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x11a>
 800244c:	2b60      	cmp	r3, #96	; 0x60
 800244e:	d877      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002450:	2b50      	cmp	r3, #80	; 0x50
 8002452:	d03c      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0xfa>
 8002454:	2b50      	cmp	r3, #80	; 0x50
 8002456:	d873      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d058      	beq.n	800250e <HAL_TIM_ConfigClockSource+0x13a>
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d86f      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002460:	2b30      	cmp	r3, #48	; 0x30
 8002462:	d064      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002464:	2b30      	cmp	r3, #48	; 0x30
 8002466:	d86b      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d060      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 800246c:	2b20      	cmp	r3, #32
 800246e:	d867      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d05c      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002474:	2b10      	cmp	r3, #16
 8002476:	d05a      	beq.n	800252e <HAL_TIM_ConfigClockSource+0x15a>
 8002478:	e062      	b.n	8002540 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6899      	ldr	r1, [r3, #8]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f000 f968 	bl	800275e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800249c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	609a      	str	r2, [r3, #8]
      break;
 80024a6:	e04f      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f000 f951 	bl	800275e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ca:	609a      	str	r2, [r3, #8]
      break;
 80024cc:	e03c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	461a      	mov	r2, r3
 80024dc:	f000 f8c8 	bl	8002670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2150      	movs	r1, #80	; 0x50
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 f91f 	bl	800272a <TIM_ITRx_SetConfig>
      break;
 80024ec:	e02c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6859      	ldr	r1, [r3, #4]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f000 f8e6 	bl	80026cc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2160      	movs	r1, #96	; 0x60
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f90f 	bl	800272a <TIM_ITRx_SetConfig>
      break;
 800250c:	e01c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6859      	ldr	r1, [r3, #4]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	461a      	mov	r2, r3
 800251c:	f000 f8a8 	bl	8002670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2140      	movs	r1, #64	; 0x40
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f8ff 	bl	800272a <TIM_ITRx_SetConfig>
      break;
 800252c:	e00c      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	4610      	mov	r0, r2
 800253a:	f000 f8f6 	bl	800272a <TIM_ITRx_SetConfig>
      break;
 800253e:	e003      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e000      	b.n	8002548 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002546:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
	...

080025ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a29      	ldr	r2, [pc, #164]	; (8002664 <TIM_Base_SetConfig+0xb8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00b      	beq.n	80025dc <TIM_Base_SetConfig+0x30>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ca:	d007      	beq.n	80025dc <TIM_Base_SetConfig+0x30>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a26      	ldr	r2, [pc, #152]	; (8002668 <TIM_Base_SetConfig+0xbc>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d003      	beq.n	80025dc <TIM_Base_SetConfig+0x30>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a25      	ldr	r2, [pc, #148]	; (800266c <TIM_Base_SetConfig+0xc0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d108      	bne.n	80025ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a1c      	ldr	r2, [pc, #112]	; (8002664 <TIM_Base_SetConfig+0xb8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00b      	beq.n	800260e <TIM_Base_SetConfig+0x62>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d007      	beq.n	800260e <TIM_Base_SetConfig+0x62>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <TIM_Base_SetConfig+0xbc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d003      	beq.n	800260e <TIM_Base_SetConfig+0x62>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a18      	ldr	r2, [pc, #96]	; (800266c <TIM_Base_SetConfig+0xc0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d108      	bne.n	8002620 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a07      	ldr	r2, [pc, #28]	; (8002664 <TIM_Base_SetConfig+0xb8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d103      	bne.n	8002654 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	615a      	str	r2, [r3, #20]
}
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40000400 	.word	0x40000400
 800266c:	40000800 	.word	0x40000800

08002670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	f023 0201 	bic.w	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800269a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f023 030a 	bic.w	r3, r3, #10
 80026ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	621a      	str	r2, [r3, #32]
}
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f023 0210 	bic.w	r2, r3, #16
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	031b      	lsls	r3, r3, #12
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002708:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	621a      	str	r2, [r3, #32]
}
 8002720:	bf00      	nop
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	f043 0307 	orr.w	r3, r3, #7
 800274c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	609a      	str	r2, [r3, #8]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800275e:	b480      	push	{r7}
 8002760:	b087      	sub	sp, #28
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002778:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	021a      	lsls	r2, r3, #8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	431a      	orrs	r2, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	4313      	orrs	r3, r2
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	609a      	str	r2, [r3, #8]
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e046      	b.n	8002842 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00e      	beq.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d009      	beq.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d004      	beq.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a10      	ldr	r2, [pc, #64]	; (8002854 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d10c      	bne.n	8002830 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	4313      	orrs	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3714      	adds	r7, #20
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40000400 	.word	0x40000400
 8002854:	40000800 	.word	0x40000800

08002858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e042      	b.n	8002914 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe f95e 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	; 0x24
 80028ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fd71 	bl	80033a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b20      	cmp	r3, #32
 800293a:	d16d      	bne.n	8002a18 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_UART_Transmit+0x2c>
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e066      	b.n	8002a1a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2221      	movs	r2, #33	; 0x21
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800295a:	f7fe fa5d 	bl	8000e18 <HAL_GetTick>
 800295e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	88fa      	ldrh	r2, [r7, #6]
 800296a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002974:	d108      	bne.n	8002988 <HAL_UART_Transmit+0x6c>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d104      	bne.n	8002988 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	e003      	b.n	8002990 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002990:	e02a      	b.n	80029e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2200      	movs	r2, #0
 800299a:	2180      	movs	r1, #128	; 0x80
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 faf9 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e036      	b.n	8002a1a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10b      	bne.n	80029ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	3302      	adds	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
 80029c8:	e007      	b.n	80029da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	3301      	adds	r3, #1
 80029d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1cf      	bne.n	8002992 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2140      	movs	r1, #64	; 0x40
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fac9 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e006      	b.n	8002a1a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
  }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3720      	adds	r7, #32
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0ba      	sub	sp, #232	; 0xe8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_UART_IRQHandler+0x66>
 8002a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fbd1 	bl	800322a <UART_Receive_IT>
      return;
 8002a88:	e25b      	b.n	8002f42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80de 	beq.w	8002c50 <HAL_UART_IRQHandler+0x22c>
 8002a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80d1 	beq.w	8002c50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xae>
 8002aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_UART_IRQHandler+0xd2>
 8002ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f043 0202 	orr.w	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_UART_IRQHandler+0xf6>
 8002b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f043 0204 	orr.w	r2, r3, #4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d011      	beq.n	8002b4a <HAL_UART_IRQHandler+0x126>
 8002b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	f043 0208 	orr.w	r2, r3, #8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 81f2 	beq.w	8002f38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_UART_IRQHandler+0x14e>
 8002b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fb5c 	bl	800322a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	bf14      	ite	ne
 8002b80:	2301      	movne	r3, #1
 8002b82:	2300      	moveq	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <HAL_UART_IRQHandler+0x17a>
 8002b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d04f      	beq.n	8002c3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fa66 	bl	8003070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d041      	beq.n	8002c36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3314      	adds	r3, #20
 8002bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bc0:	e853 3f00 	ldrex	r3, [r3]
 8002bc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3314      	adds	r3, #20
 8002bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1d9      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d013      	beq.n	8002c2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	4a7e      	ldr	r2, [pc, #504]	; (8002e04 <HAL_UART_IRQHandler+0x3e0>)
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fa76 	bl	8001104 <HAL_DMA_Abort_IT>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2c:	e00e      	b.n	8002c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f99c 	bl	8002f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	e00a      	b.n	8002c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f998 	bl	8002f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	e006      	b.n	8002c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f994 	bl	8002f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002c4a:	e175      	b.n	8002f38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	bf00      	nop
    return;
 8002c4e:	e173      	b.n	8002f38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	f040 814f 	bne.w	8002ef8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8148 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8141 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 80b6 	beq.w	8002e08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ca8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8145 	beq.w	8002f3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	f080 813e 	bcs.w	8002f3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f000 8088 	beq.w	8002de4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ce2:	e853 3f00 	ldrex	r3, [r3]
 8002ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	330c      	adds	r3, #12
 8002cfc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d00:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1d9      	bne.n	8002cd4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3314      	adds	r3, #20
 8002d26:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2a:	e853 3f00 	ldrex	r3, [r3]
 8002d2e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d32:	f023 0301 	bic.w	r3, r3, #1
 8002d36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3314      	adds	r3, #20
 8002d40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d50:	e841 2300 	strex	r3, r2, [r1]
 8002d54:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e1      	bne.n	8002d20 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3314      	adds	r3, #20
 8002d62:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d66:	e853 3f00 	ldrex	r3, [r3]
 8002d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3314      	adds	r3, #20
 8002d7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d86:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d88:	e841 2300 	strex	r3, r2, [r1]
 8002d8c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e3      	bne.n	8002d5c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	330c      	adds	r3, #12
 8002da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dac:	e853 3f00 	ldrex	r3, [r3]
 8002db0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db4:	f023 0310 	bic.w	r3, r3, #16
 8002db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002dc6:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dc8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e3      	bne.n	8002da2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe f955 	bl	800108e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f8bf 	bl	8002f7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e00:	e09c      	b.n	8002f3c <HAL_UART_IRQHandler+0x518>
 8002e02:	bf00      	nop
 8002e04:	08003135 	.word	0x08003135
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 808e 	beq.w	8002f40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8089 	beq.w	8002f40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e52:	647a      	str	r2, [r7, #68]	; 0x44
 8002e54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e5a:	e841 2300 	strex	r3, r2, [r1]
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e3      	bne.n	8002e2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	623b      	str	r3, [r7, #32]
   return(result);
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3314      	adds	r3, #20
 8002e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e8a:	633a      	str	r2, [r7, #48]	; 0x30
 8002e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e92:	e841 2300 	strex	r3, r2, [r1]
 8002e96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e3      	bne.n	8002e66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	e853 3f00 	ldrex	r3, [r3]
 8002eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0310 	bic.w	r3, r3, #16
 8002ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	330c      	adds	r3, #12
 8002ecc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ed0:	61fa      	str	r2, [r7, #28]
 8002ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	69b9      	ldr	r1, [r7, #24]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e3      	bne.n	8002eac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f844 	bl	8002f7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ef6:	e023      	b.n	8002f40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_UART_IRQHandler+0x4f4>
 8002f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f923 	bl	800315c <UART_Transmit_IT>
    return;
 8002f16:	e014      	b.n	8002f42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00e      	beq.n	8002f42 <HAL_UART_IRQHandler+0x51e>
 8002f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f962 	bl	80031fa <UART_EndTransmit_IT>
    return;
 8002f36:	e004      	b.n	8002f42 <HAL_UART_IRQHandler+0x51e>
    return;
 8002f38:	bf00      	nop
 8002f3a:	e002      	b.n	8002f42 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f40:	bf00      	nop
  }
}
 8002f42:	37e8      	adds	r7, #232	; 0xe8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr

08002f5a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b090      	sub	sp, #64	; 0x40
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa4:	e050      	b.n	8003048 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d04c      	beq.n	8003048 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb4:	f7fd ff30 	bl	8000e18 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d241      	bcs.n	8003048 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	e853 3f00 	ldrex	r3, [r3]
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fe4:	637a      	str	r2, [r7, #52]	; 0x34
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fec:	e841 2300 	strex	r3, r2, [r1]
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1e5      	bne.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	3314      	adds	r3, #20
 8002ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	e853 3f00 	ldrex	r3, [r3]
 8003006:	613b      	str	r3, [r7, #16]
   return(result);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3314      	adds	r3, #20
 8003016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003018:	623a      	str	r2, [r7, #32]
 800301a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	69f9      	ldr	r1, [r7, #28]
 800301e:	6a3a      	ldr	r2, [r7, #32]
 8003020:	e841 2300 	strex	r3, r2, [r1]
 8003024:	61bb      	str	r3, [r7, #24]
   return(result);
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1e5      	bne.n	8002ff8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e00f      	b.n	8003068 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4013      	ands	r3, r2
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	429a      	cmp	r2, r3
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	429a      	cmp	r2, r3
 8003064:	d09f      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3740      	adds	r7, #64	; 0x40
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003070:	b480      	push	{r7}
 8003072:	b095      	sub	sp, #84	; 0x54
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	330c      	adds	r3, #12
 800307e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003082:	e853 3f00 	ldrex	r3, [r3]
 8003086:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800308e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003098:	643a      	str	r2, [r7, #64]	; 0x40
 800309a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800309e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e5      	bne.n	8003078 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3314      	adds	r3, #20
 80030b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	e853 3f00 	ldrex	r3, [r3]
 80030ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3314      	adds	r3, #20
 80030ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e5      	bne.n	80030ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d119      	bne.n	800311c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	e853 3f00 	ldrex	r3, [r3]
 80030f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f023 0310 	bic.w	r3, r3, #16
 80030fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003108:	61ba      	str	r2, [r7, #24]
 800310a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	6979      	ldr	r1, [r7, #20]
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	e841 2300 	strex	r3, r2, [r1]
 8003114:	613b      	str	r3, [r7, #16]
   return(result);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e5      	bne.n	80030e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
}
 800312a:	bf00      	nop
 800312c:	3754      	adds	r7, #84	; 0x54
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff ff0c 	bl	8002f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b21      	cmp	r3, #33	; 0x21
 800316e:	d13e      	bne.n	80031ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003178:	d114      	bne.n	80031a4 <UART_Transmit_IT+0x48>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d110      	bne.n	80031a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003196:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	621a      	str	r2, [r3, #32]
 80031a2:	e008      	b.n	80031b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	1c59      	adds	r1, r3, #1
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6211      	str	r1, [r2, #32]
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4619      	mov	r1, r3
 80031c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10f      	bne.n	80031ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
  }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003210:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fe94 	bl	8002f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b08c      	sub	sp, #48	; 0x30
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b22      	cmp	r3, #34	; 0x22
 800323c:	f040 80ae 	bne.w	800339c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003248:	d117      	bne.n	800327a <UART_Receive_IT+0x50>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d113      	bne.n	800327a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	b29b      	uxth	r3, r3
 8003264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003268:	b29a      	uxth	r2, r3
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	1c9a      	adds	r2, r3, #2
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28
 8003278:	e026      	b.n	80032c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328c:	d007      	beq.n	800329e <UART_Receive_IT+0x74>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <UART_Receive_IT+0x82>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e008      	b.n	80032be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4619      	mov	r1, r3
 80032d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d15d      	bne.n	8003398 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0220 	bic.w	r2, r2, #32
 80032ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	2b01      	cmp	r3, #1
 8003320:	d135      	bne.n	800338e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	613b      	str	r3, [r7, #16]
   return(result);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f023 0310 	bic.w	r3, r3, #16
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003348:	623a      	str	r2, [r7, #32]
 800334a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	69f9      	ldr	r1, [r7, #28]
 800334e:	6a3a      	ldr	r2, [r7, #32]
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	61bb      	str	r3, [r7, #24]
   return(result);
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e5      	bne.n	8003328 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	2b10      	cmp	r3, #16
 8003368:	d10a      	bne.n	8003380 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fdf9 	bl	8002f7e <HAL_UARTEx_RxEventCallback>
 800338c:	e002      	b.n	8003394 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fde3 	bl	8002f5a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e002      	b.n	800339e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e000      	b.n	800339e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3730      	adds	r7, #48	; 0x30
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033e2:	f023 030c 	bic.w	r3, r3, #12
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	430b      	orrs	r3, r1
 80033ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2c      	ldr	r2, [pc, #176]	; (80034bc <UART_SetConfig+0x114>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d103      	bne.n	8003418 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe fe04 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	e002      	b.n	800341e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003418:	f7fe fdec 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 800341c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	009a      	lsls	r2, r3, #2
 8003428:	441a      	add	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	fbb2 f3f3 	udiv	r3, r2, r3
 8003434:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <UART_SetConfig+0x118>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	0119      	lsls	r1, r3, #4
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	009a      	lsls	r2, r3, #2
 8003448:	441a      	add	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	fbb2 f2f3 	udiv	r2, r2, r3
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <UART_SetConfig+0x118>)
 8003456:	fba3 0302 	umull	r0, r3, r3, r2
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	2064      	movs	r0, #100	; 0x64
 800345e:	fb00 f303 	mul.w	r3, r0, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	3332      	adds	r3, #50	; 0x32
 8003468:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <UART_SetConfig+0x118>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003474:	4419      	add	r1, r3
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009a      	lsls	r2, r3, #2
 8003480:	441a      	add	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	fbb2 f2f3 	udiv	r2, r2, r3
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <UART_SetConfig+0x118>)
 800348e:	fba3 0302 	umull	r0, r3, r3, r2
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2064      	movs	r0, #100	; 0x64
 8003496:	fb00 f303 	mul.w	r3, r0, r3
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	3332      	adds	r3, #50	; 0x32
 80034a0:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <UART_SetConfig+0x118>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	f003 020f 	and.w	r2, r3, #15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	440a      	add	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40013800 	.word	0x40013800
 80034c0:	51eb851f 	.word	0x51eb851f

080034c4 <__errno>:
 80034c4:	4b01      	ldr	r3, [pc, #4]	; (80034cc <__errno+0x8>)
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000014 	.word	0x20000014

080034d0 <__libc_init_array>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	2600      	movs	r6, #0
 80034d4:	4d0c      	ldr	r5, [pc, #48]	; (8003508 <__libc_init_array+0x38>)
 80034d6:	4c0d      	ldr	r4, [pc, #52]	; (800350c <__libc_init_array+0x3c>)
 80034d8:	1b64      	subs	r4, r4, r5
 80034da:	10a4      	asrs	r4, r4, #2
 80034dc:	42a6      	cmp	r6, r4
 80034de:	d109      	bne.n	80034f4 <__libc_init_array+0x24>
 80034e0:	f000 fc9c 	bl	8003e1c <_init>
 80034e4:	2600      	movs	r6, #0
 80034e6:	4d0a      	ldr	r5, [pc, #40]	; (8003510 <__libc_init_array+0x40>)
 80034e8:	4c0a      	ldr	r4, [pc, #40]	; (8003514 <__libc_init_array+0x44>)
 80034ea:	1b64      	subs	r4, r4, r5
 80034ec:	10a4      	asrs	r4, r4, #2
 80034ee:	42a6      	cmp	r6, r4
 80034f0:	d105      	bne.n	80034fe <__libc_init_array+0x2e>
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f8:	4798      	blx	r3
 80034fa:	3601      	adds	r6, #1
 80034fc:	e7ee      	b.n	80034dc <__libc_init_array+0xc>
 80034fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003502:	4798      	blx	r3
 8003504:	3601      	adds	r6, #1
 8003506:	e7f2      	b.n	80034ee <__libc_init_array+0x1e>
 8003508:	08003ea8 	.word	0x08003ea8
 800350c:	08003ea8 	.word	0x08003ea8
 8003510:	08003ea8 	.word	0x08003ea8
 8003514:	08003eac 	.word	0x08003eac

08003518 <memset>:
 8003518:	4603      	mov	r3, r0
 800351a:	4402      	add	r2, r0
 800351c:	4293      	cmp	r3, r2
 800351e:	d100      	bne.n	8003522 <memset+0xa>
 8003520:	4770      	bx	lr
 8003522:	f803 1b01 	strb.w	r1, [r3], #1
 8003526:	e7f9      	b.n	800351c <memset+0x4>

08003528 <siprintf>:
 8003528:	b40e      	push	{r1, r2, r3}
 800352a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800352e:	b500      	push	{lr}
 8003530:	b09c      	sub	sp, #112	; 0x70
 8003532:	ab1d      	add	r3, sp, #116	; 0x74
 8003534:	9002      	str	r0, [sp, #8]
 8003536:	9006      	str	r0, [sp, #24]
 8003538:	9107      	str	r1, [sp, #28]
 800353a:	9104      	str	r1, [sp, #16]
 800353c:	4808      	ldr	r0, [pc, #32]	; (8003560 <siprintf+0x38>)
 800353e:	4909      	ldr	r1, [pc, #36]	; (8003564 <siprintf+0x3c>)
 8003540:	f853 2b04 	ldr.w	r2, [r3], #4
 8003544:	9105      	str	r1, [sp, #20]
 8003546:	6800      	ldr	r0, [r0, #0]
 8003548:	a902      	add	r1, sp, #8
 800354a:	9301      	str	r3, [sp, #4]
 800354c:	f000 f868 	bl	8003620 <_svfiprintf_r>
 8003550:	2200      	movs	r2, #0
 8003552:	9b02      	ldr	r3, [sp, #8]
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	b01c      	add	sp, #112	; 0x70
 8003558:	f85d eb04 	ldr.w	lr, [sp], #4
 800355c:	b003      	add	sp, #12
 800355e:	4770      	bx	lr
 8003560:	20000014 	.word	0x20000014
 8003564:	ffff0208 	.word	0xffff0208

08003568 <__ssputs_r>:
 8003568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800356c:	688e      	ldr	r6, [r1, #8]
 800356e:	4682      	mov	sl, r0
 8003570:	429e      	cmp	r6, r3
 8003572:	460c      	mov	r4, r1
 8003574:	4690      	mov	r8, r2
 8003576:	461f      	mov	r7, r3
 8003578:	d838      	bhi.n	80035ec <__ssputs_r+0x84>
 800357a:	898a      	ldrh	r2, [r1, #12]
 800357c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003580:	d032      	beq.n	80035e8 <__ssputs_r+0x80>
 8003582:	6825      	ldr	r5, [r4, #0]
 8003584:	6909      	ldr	r1, [r1, #16]
 8003586:	3301      	adds	r3, #1
 8003588:	eba5 0901 	sub.w	r9, r5, r1
 800358c:	6965      	ldr	r5, [r4, #20]
 800358e:	444b      	add	r3, r9
 8003590:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003594:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003598:	106d      	asrs	r5, r5, #1
 800359a:	429d      	cmp	r5, r3
 800359c:	bf38      	it	cc
 800359e:	461d      	movcc	r5, r3
 80035a0:	0553      	lsls	r3, r2, #21
 80035a2:	d531      	bpl.n	8003608 <__ssputs_r+0xa0>
 80035a4:	4629      	mov	r1, r5
 80035a6:	f000 fb6f 	bl	8003c88 <_malloc_r>
 80035aa:	4606      	mov	r6, r0
 80035ac:	b950      	cbnz	r0, 80035c4 <__ssputs_r+0x5c>
 80035ae:	230c      	movs	r3, #12
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295
 80035b4:	f8ca 3000 	str.w	r3, [sl]
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035be:	81a3      	strh	r3, [r4, #12]
 80035c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c4:	464a      	mov	r2, r9
 80035c6:	6921      	ldr	r1, [r4, #16]
 80035c8:	f000 face 	bl	8003b68 <memcpy>
 80035cc:	89a3      	ldrh	r3, [r4, #12]
 80035ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d6:	81a3      	strh	r3, [r4, #12]
 80035d8:	6126      	str	r6, [r4, #16]
 80035da:	444e      	add	r6, r9
 80035dc:	6026      	str	r6, [r4, #0]
 80035de:	463e      	mov	r6, r7
 80035e0:	6165      	str	r5, [r4, #20]
 80035e2:	eba5 0509 	sub.w	r5, r5, r9
 80035e6:	60a5      	str	r5, [r4, #8]
 80035e8:	42be      	cmp	r6, r7
 80035ea:	d900      	bls.n	80035ee <__ssputs_r+0x86>
 80035ec:	463e      	mov	r6, r7
 80035ee:	4632      	mov	r2, r6
 80035f0:	4641      	mov	r1, r8
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	f000 fac6 	bl	8003b84 <memmove>
 80035f8:	68a3      	ldr	r3, [r4, #8]
 80035fa:	2000      	movs	r0, #0
 80035fc:	1b9b      	subs	r3, r3, r6
 80035fe:	60a3      	str	r3, [r4, #8]
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	4433      	add	r3, r6
 8003604:	6023      	str	r3, [r4, #0]
 8003606:	e7db      	b.n	80035c0 <__ssputs_r+0x58>
 8003608:	462a      	mov	r2, r5
 800360a:	f000 fbb1 	bl	8003d70 <_realloc_r>
 800360e:	4606      	mov	r6, r0
 8003610:	2800      	cmp	r0, #0
 8003612:	d1e1      	bne.n	80035d8 <__ssputs_r+0x70>
 8003614:	4650      	mov	r0, sl
 8003616:	6921      	ldr	r1, [r4, #16]
 8003618:	f000 face 	bl	8003bb8 <_free_r>
 800361c:	e7c7      	b.n	80035ae <__ssputs_r+0x46>
	...

08003620 <_svfiprintf_r>:
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003624:	4698      	mov	r8, r3
 8003626:	898b      	ldrh	r3, [r1, #12]
 8003628:	4607      	mov	r7, r0
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	460d      	mov	r5, r1
 800362e:	4614      	mov	r4, r2
 8003630:	b09d      	sub	sp, #116	; 0x74
 8003632:	d50e      	bpl.n	8003652 <_svfiprintf_r+0x32>
 8003634:	690b      	ldr	r3, [r1, #16]
 8003636:	b963      	cbnz	r3, 8003652 <_svfiprintf_r+0x32>
 8003638:	2140      	movs	r1, #64	; 0x40
 800363a:	f000 fb25 	bl	8003c88 <_malloc_r>
 800363e:	6028      	str	r0, [r5, #0]
 8003640:	6128      	str	r0, [r5, #16]
 8003642:	b920      	cbnz	r0, 800364e <_svfiprintf_r+0x2e>
 8003644:	230c      	movs	r3, #12
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	f04f 30ff 	mov.w	r0, #4294967295
 800364c:	e0d1      	b.n	80037f2 <_svfiprintf_r+0x1d2>
 800364e:	2340      	movs	r3, #64	; 0x40
 8003650:	616b      	str	r3, [r5, #20]
 8003652:	2300      	movs	r3, #0
 8003654:	9309      	str	r3, [sp, #36]	; 0x24
 8003656:	2320      	movs	r3, #32
 8003658:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800365c:	2330      	movs	r3, #48	; 0x30
 800365e:	f04f 0901 	mov.w	r9, #1
 8003662:	f8cd 800c 	str.w	r8, [sp, #12]
 8003666:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800380c <_svfiprintf_r+0x1ec>
 800366a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800366e:	4623      	mov	r3, r4
 8003670:	469a      	mov	sl, r3
 8003672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003676:	b10a      	cbz	r2, 800367c <_svfiprintf_r+0x5c>
 8003678:	2a25      	cmp	r2, #37	; 0x25
 800367a:	d1f9      	bne.n	8003670 <_svfiprintf_r+0x50>
 800367c:	ebba 0b04 	subs.w	fp, sl, r4
 8003680:	d00b      	beq.n	800369a <_svfiprintf_r+0x7a>
 8003682:	465b      	mov	r3, fp
 8003684:	4622      	mov	r2, r4
 8003686:	4629      	mov	r1, r5
 8003688:	4638      	mov	r0, r7
 800368a:	f7ff ff6d 	bl	8003568 <__ssputs_r>
 800368e:	3001      	adds	r0, #1
 8003690:	f000 80aa 	beq.w	80037e8 <_svfiprintf_r+0x1c8>
 8003694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003696:	445a      	add	r2, fp
 8003698:	9209      	str	r2, [sp, #36]	; 0x24
 800369a:	f89a 3000 	ldrb.w	r3, [sl]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 80a2 	beq.w	80037e8 <_svfiprintf_r+0x1c8>
 80036a4:	2300      	movs	r3, #0
 80036a6:	f04f 32ff 	mov.w	r2, #4294967295
 80036aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ae:	f10a 0a01 	add.w	sl, sl, #1
 80036b2:	9304      	str	r3, [sp, #16]
 80036b4:	9307      	str	r3, [sp, #28]
 80036b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036ba:	931a      	str	r3, [sp, #104]	; 0x68
 80036bc:	4654      	mov	r4, sl
 80036be:	2205      	movs	r2, #5
 80036c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c4:	4851      	ldr	r0, [pc, #324]	; (800380c <_svfiprintf_r+0x1ec>)
 80036c6:	f000 fa41 	bl	8003b4c <memchr>
 80036ca:	9a04      	ldr	r2, [sp, #16]
 80036cc:	b9d8      	cbnz	r0, 8003706 <_svfiprintf_r+0xe6>
 80036ce:	06d0      	lsls	r0, r2, #27
 80036d0:	bf44      	itt	mi
 80036d2:	2320      	movmi	r3, #32
 80036d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036d8:	0711      	lsls	r1, r2, #28
 80036da:	bf44      	itt	mi
 80036dc:	232b      	movmi	r3, #43	; 0x2b
 80036de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036e2:	f89a 3000 	ldrb.w	r3, [sl]
 80036e6:	2b2a      	cmp	r3, #42	; 0x2a
 80036e8:	d015      	beq.n	8003716 <_svfiprintf_r+0xf6>
 80036ea:	4654      	mov	r4, sl
 80036ec:	2000      	movs	r0, #0
 80036ee:	f04f 0c0a 	mov.w	ip, #10
 80036f2:	9a07      	ldr	r2, [sp, #28]
 80036f4:	4621      	mov	r1, r4
 80036f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036fa:	3b30      	subs	r3, #48	; 0x30
 80036fc:	2b09      	cmp	r3, #9
 80036fe:	d94e      	bls.n	800379e <_svfiprintf_r+0x17e>
 8003700:	b1b0      	cbz	r0, 8003730 <_svfiprintf_r+0x110>
 8003702:	9207      	str	r2, [sp, #28]
 8003704:	e014      	b.n	8003730 <_svfiprintf_r+0x110>
 8003706:	eba0 0308 	sub.w	r3, r0, r8
 800370a:	fa09 f303 	lsl.w	r3, r9, r3
 800370e:	4313      	orrs	r3, r2
 8003710:	46a2      	mov	sl, r4
 8003712:	9304      	str	r3, [sp, #16]
 8003714:	e7d2      	b.n	80036bc <_svfiprintf_r+0x9c>
 8003716:	9b03      	ldr	r3, [sp, #12]
 8003718:	1d19      	adds	r1, r3, #4
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	9103      	str	r1, [sp, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	bfbb      	ittet	lt
 8003722:	425b      	neglt	r3, r3
 8003724:	f042 0202 	orrlt.w	r2, r2, #2
 8003728:	9307      	strge	r3, [sp, #28]
 800372a:	9307      	strlt	r3, [sp, #28]
 800372c:	bfb8      	it	lt
 800372e:	9204      	strlt	r2, [sp, #16]
 8003730:	7823      	ldrb	r3, [r4, #0]
 8003732:	2b2e      	cmp	r3, #46	; 0x2e
 8003734:	d10c      	bne.n	8003750 <_svfiprintf_r+0x130>
 8003736:	7863      	ldrb	r3, [r4, #1]
 8003738:	2b2a      	cmp	r3, #42	; 0x2a
 800373a:	d135      	bne.n	80037a8 <_svfiprintf_r+0x188>
 800373c:	9b03      	ldr	r3, [sp, #12]
 800373e:	3402      	adds	r4, #2
 8003740:	1d1a      	adds	r2, r3, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	9203      	str	r2, [sp, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	bfb8      	it	lt
 800374a:	f04f 33ff 	movlt.w	r3, #4294967295
 800374e:	9305      	str	r3, [sp, #20]
 8003750:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003810 <_svfiprintf_r+0x1f0>
 8003754:	2203      	movs	r2, #3
 8003756:	4650      	mov	r0, sl
 8003758:	7821      	ldrb	r1, [r4, #0]
 800375a:	f000 f9f7 	bl	8003b4c <memchr>
 800375e:	b140      	cbz	r0, 8003772 <_svfiprintf_r+0x152>
 8003760:	2340      	movs	r3, #64	; 0x40
 8003762:	eba0 000a 	sub.w	r0, r0, sl
 8003766:	fa03 f000 	lsl.w	r0, r3, r0
 800376a:	9b04      	ldr	r3, [sp, #16]
 800376c:	3401      	adds	r4, #1
 800376e:	4303      	orrs	r3, r0
 8003770:	9304      	str	r3, [sp, #16]
 8003772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003776:	2206      	movs	r2, #6
 8003778:	4826      	ldr	r0, [pc, #152]	; (8003814 <_svfiprintf_r+0x1f4>)
 800377a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800377e:	f000 f9e5 	bl	8003b4c <memchr>
 8003782:	2800      	cmp	r0, #0
 8003784:	d038      	beq.n	80037f8 <_svfiprintf_r+0x1d8>
 8003786:	4b24      	ldr	r3, [pc, #144]	; (8003818 <_svfiprintf_r+0x1f8>)
 8003788:	bb1b      	cbnz	r3, 80037d2 <_svfiprintf_r+0x1b2>
 800378a:	9b03      	ldr	r3, [sp, #12]
 800378c:	3307      	adds	r3, #7
 800378e:	f023 0307 	bic.w	r3, r3, #7
 8003792:	3308      	adds	r3, #8
 8003794:	9303      	str	r3, [sp, #12]
 8003796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003798:	4433      	add	r3, r6
 800379a:	9309      	str	r3, [sp, #36]	; 0x24
 800379c:	e767      	b.n	800366e <_svfiprintf_r+0x4e>
 800379e:	460c      	mov	r4, r1
 80037a0:	2001      	movs	r0, #1
 80037a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80037a6:	e7a5      	b.n	80036f4 <_svfiprintf_r+0xd4>
 80037a8:	2300      	movs	r3, #0
 80037aa:	f04f 0c0a 	mov.w	ip, #10
 80037ae:	4619      	mov	r1, r3
 80037b0:	3401      	adds	r4, #1
 80037b2:	9305      	str	r3, [sp, #20]
 80037b4:	4620      	mov	r0, r4
 80037b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ba:	3a30      	subs	r2, #48	; 0x30
 80037bc:	2a09      	cmp	r2, #9
 80037be:	d903      	bls.n	80037c8 <_svfiprintf_r+0x1a8>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0c5      	beq.n	8003750 <_svfiprintf_r+0x130>
 80037c4:	9105      	str	r1, [sp, #20]
 80037c6:	e7c3      	b.n	8003750 <_svfiprintf_r+0x130>
 80037c8:	4604      	mov	r4, r0
 80037ca:	2301      	movs	r3, #1
 80037cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80037d0:	e7f0      	b.n	80037b4 <_svfiprintf_r+0x194>
 80037d2:	ab03      	add	r3, sp, #12
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	462a      	mov	r2, r5
 80037d8:	4638      	mov	r0, r7
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <_svfiprintf_r+0x1fc>)
 80037dc:	a904      	add	r1, sp, #16
 80037de:	f3af 8000 	nop.w
 80037e2:	1c42      	adds	r2, r0, #1
 80037e4:	4606      	mov	r6, r0
 80037e6:	d1d6      	bne.n	8003796 <_svfiprintf_r+0x176>
 80037e8:	89ab      	ldrh	r3, [r5, #12]
 80037ea:	065b      	lsls	r3, r3, #25
 80037ec:	f53f af2c 	bmi.w	8003648 <_svfiprintf_r+0x28>
 80037f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037f2:	b01d      	add	sp, #116	; 0x74
 80037f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037f8:	ab03      	add	r3, sp, #12
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	462a      	mov	r2, r5
 80037fe:	4638      	mov	r0, r7
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <_svfiprintf_r+0x1fc>)
 8003802:	a904      	add	r1, sp, #16
 8003804:	f000 f87c 	bl	8003900 <_printf_i>
 8003808:	e7eb      	b.n	80037e2 <_svfiprintf_r+0x1c2>
 800380a:	bf00      	nop
 800380c:	08003e72 	.word	0x08003e72
 8003810:	08003e78 	.word	0x08003e78
 8003814:	08003e7c 	.word	0x08003e7c
 8003818:	00000000 	.word	0x00000000
 800381c:	08003569 	.word	0x08003569

08003820 <_printf_common>:
 8003820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003824:	4616      	mov	r6, r2
 8003826:	4699      	mov	r9, r3
 8003828:	688a      	ldr	r2, [r1, #8]
 800382a:	690b      	ldr	r3, [r1, #16]
 800382c:	4607      	mov	r7, r0
 800382e:	4293      	cmp	r3, r2
 8003830:	bfb8      	it	lt
 8003832:	4613      	movlt	r3, r2
 8003834:	6033      	str	r3, [r6, #0]
 8003836:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800383a:	460c      	mov	r4, r1
 800383c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003840:	b10a      	cbz	r2, 8003846 <_printf_common+0x26>
 8003842:	3301      	adds	r3, #1
 8003844:	6033      	str	r3, [r6, #0]
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	0699      	lsls	r1, r3, #26
 800384a:	bf42      	ittt	mi
 800384c:	6833      	ldrmi	r3, [r6, #0]
 800384e:	3302      	addmi	r3, #2
 8003850:	6033      	strmi	r3, [r6, #0]
 8003852:	6825      	ldr	r5, [r4, #0]
 8003854:	f015 0506 	ands.w	r5, r5, #6
 8003858:	d106      	bne.n	8003868 <_printf_common+0x48>
 800385a:	f104 0a19 	add.w	sl, r4, #25
 800385e:	68e3      	ldr	r3, [r4, #12]
 8003860:	6832      	ldr	r2, [r6, #0]
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	42ab      	cmp	r3, r5
 8003866:	dc28      	bgt.n	80038ba <_printf_common+0x9a>
 8003868:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800386c:	1e13      	subs	r3, r2, #0
 800386e:	6822      	ldr	r2, [r4, #0]
 8003870:	bf18      	it	ne
 8003872:	2301      	movne	r3, #1
 8003874:	0692      	lsls	r2, r2, #26
 8003876:	d42d      	bmi.n	80038d4 <_printf_common+0xb4>
 8003878:	4649      	mov	r1, r9
 800387a:	4638      	mov	r0, r7
 800387c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003880:	47c0      	blx	r8
 8003882:	3001      	adds	r0, #1
 8003884:	d020      	beq.n	80038c8 <_printf_common+0xa8>
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	68e5      	ldr	r5, [r4, #12]
 800388a:	f003 0306 	and.w	r3, r3, #6
 800388e:	2b04      	cmp	r3, #4
 8003890:	bf18      	it	ne
 8003892:	2500      	movne	r5, #0
 8003894:	6832      	ldr	r2, [r6, #0]
 8003896:	f04f 0600 	mov.w	r6, #0
 800389a:	68a3      	ldr	r3, [r4, #8]
 800389c:	bf08      	it	eq
 800389e:	1aad      	subeq	r5, r5, r2
 80038a0:	6922      	ldr	r2, [r4, #16]
 80038a2:	bf08      	it	eq
 80038a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bfc4      	itt	gt
 80038ac:	1a9b      	subgt	r3, r3, r2
 80038ae:	18ed      	addgt	r5, r5, r3
 80038b0:	341a      	adds	r4, #26
 80038b2:	42b5      	cmp	r5, r6
 80038b4:	d11a      	bne.n	80038ec <_printf_common+0xcc>
 80038b6:	2000      	movs	r0, #0
 80038b8:	e008      	b.n	80038cc <_printf_common+0xac>
 80038ba:	2301      	movs	r3, #1
 80038bc:	4652      	mov	r2, sl
 80038be:	4649      	mov	r1, r9
 80038c0:	4638      	mov	r0, r7
 80038c2:	47c0      	blx	r8
 80038c4:	3001      	adds	r0, #1
 80038c6:	d103      	bne.n	80038d0 <_printf_common+0xb0>
 80038c8:	f04f 30ff 	mov.w	r0, #4294967295
 80038cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d0:	3501      	adds	r5, #1
 80038d2:	e7c4      	b.n	800385e <_printf_common+0x3e>
 80038d4:	2030      	movs	r0, #48	; 0x30
 80038d6:	18e1      	adds	r1, r4, r3
 80038d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038e2:	4422      	add	r2, r4
 80038e4:	3302      	adds	r3, #2
 80038e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038ea:	e7c5      	b.n	8003878 <_printf_common+0x58>
 80038ec:	2301      	movs	r3, #1
 80038ee:	4622      	mov	r2, r4
 80038f0:	4649      	mov	r1, r9
 80038f2:	4638      	mov	r0, r7
 80038f4:	47c0      	blx	r8
 80038f6:	3001      	adds	r0, #1
 80038f8:	d0e6      	beq.n	80038c8 <_printf_common+0xa8>
 80038fa:	3601      	adds	r6, #1
 80038fc:	e7d9      	b.n	80038b2 <_printf_common+0x92>
	...

08003900 <_printf_i>:
 8003900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003904:	7e0f      	ldrb	r7, [r1, #24]
 8003906:	4691      	mov	r9, r2
 8003908:	2f78      	cmp	r7, #120	; 0x78
 800390a:	4680      	mov	r8, r0
 800390c:	460c      	mov	r4, r1
 800390e:	469a      	mov	sl, r3
 8003910:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003916:	d807      	bhi.n	8003928 <_printf_i+0x28>
 8003918:	2f62      	cmp	r7, #98	; 0x62
 800391a:	d80a      	bhi.n	8003932 <_printf_i+0x32>
 800391c:	2f00      	cmp	r7, #0
 800391e:	f000 80d9 	beq.w	8003ad4 <_printf_i+0x1d4>
 8003922:	2f58      	cmp	r7, #88	; 0x58
 8003924:	f000 80a4 	beq.w	8003a70 <_printf_i+0x170>
 8003928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800392c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003930:	e03a      	b.n	80039a8 <_printf_i+0xa8>
 8003932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003936:	2b15      	cmp	r3, #21
 8003938:	d8f6      	bhi.n	8003928 <_printf_i+0x28>
 800393a:	a101      	add	r1, pc, #4	; (adr r1, 8003940 <_printf_i+0x40>)
 800393c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003940:	08003999 	.word	0x08003999
 8003944:	080039ad 	.word	0x080039ad
 8003948:	08003929 	.word	0x08003929
 800394c:	08003929 	.word	0x08003929
 8003950:	08003929 	.word	0x08003929
 8003954:	08003929 	.word	0x08003929
 8003958:	080039ad 	.word	0x080039ad
 800395c:	08003929 	.word	0x08003929
 8003960:	08003929 	.word	0x08003929
 8003964:	08003929 	.word	0x08003929
 8003968:	08003929 	.word	0x08003929
 800396c:	08003abb 	.word	0x08003abb
 8003970:	080039dd 	.word	0x080039dd
 8003974:	08003a9d 	.word	0x08003a9d
 8003978:	08003929 	.word	0x08003929
 800397c:	08003929 	.word	0x08003929
 8003980:	08003add 	.word	0x08003add
 8003984:	08003929 	.word	0x08003929
 8003988:	080039dd 	.word	0x080039dd
 800398c:	08003929 	.word	0x08003929
 8003990:	08003929 	.word	0x08003929
 8003994:	08003aa5 	.word	0x08003aa5
 8003998:	682b      	ldr	r3, [r5, #0]
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	602a      	str	r2, [r5, #0]
 80039a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0a4      	b.n	8003af6 <_printf_i+0x1f6>
 80039ac:	6820      	ldr	r0, [r4, #0]
 80039ae:	6829      	ldr	r1, [r5, #0]
 80039b0:	0606      	lsls	r6, r0, #24
 80039b2:	f101 0304 	add.w	r3, r1, #4
 80039b6:	d50a      	bpl.n	80039ce <_printf_i+0xce>
 80039b8:	680e      	ldr	r6, [r1, #0]
 80039ba:	602b      	str	r3, [r5, #0]
 80039bc:	2e00      	cmp	r6, #0
 80039be:	da03      	bge.n	80039c8 <_printf_i+0xc8>
 80039c0:	232d      	movs	r3, #45	; 0x2d
 80039c2:	4276      	negs	r6, r6
 80039c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039c8:	230a      	movs	r3, #10
 80039ca:	485e      	ldr	r0, [pc, #376]	; (8003b44 <_printf_i+0x244>)
 80039cc:	e019      	b.n	8003a02 <_printf_i+0x102>
 80039ce:	680e      	ldr	r6, [r1, #0]
 80039d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039d4:	602b      	str	r3, [r5, #0]
 80039d6:	bf18      	it	ne
 80039d8:	b236      	sxthne	r6, r6
 80039da:	e7ef      	b.n	80039bc <_printf_i+0xbc>
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	6820      	ldr	r0, [r4, #0]
 80039e0:	1d19      	adds	r1, r3, #4
 80039e2:	6029      	str	r1, [r5, #0]
 80039e4:	0601      	lsls	r1, r0, #24
 80039e6:	d501      	bpl.n	80039ec <_printf_i+0xec>
 80039e8:	681e      	ldr	r6, [r3, #0]
 80039ea:	e002      	b.n	80039f2 <_printf_i+0xf2>
 80039ec:	0646      	lsls	r6, r0, #25
 80039ee:	d5fb      	bpl.n	80039e8 <_printf_i+0xe8>
 80039f0:	881e      	ldrh	r6, [r3, #0]
 80039f2:	2f6f      	cmp	r7, #111	; 0x6f
 80039f4:	bf0c      	ite	eq
 80039f6:	2308      	moveq	r3, #8
 80039f8:	230a      	movne	r3, #10
 80039fa:	4852      	ldr	r0, [pc, #328]	; (8003b44 <_printf_i+0x244>)
 80039fc:	2100      	movs	r1, #0
 80039fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a02:	6865      	ldr	r5, [r4, #4]
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	bfa8      	it	ge
 8003a08:	6821      	ldrge	r1, [r4, #0]
 8003a0a:	60a5      	str	r5, [r4, #8]
 8003a0c:	bfa4      	itt	ge
 8003a0e:	f021 0104 	bicge.w	r1, r1, #4
 8003a12:	6021      	strge	r1, [r4, #0]
 8003a14:	b90e      	cbnz	r6, 8003a1a <_printf_i+0x11a>
 8003a16:	2d00      	cmp	r5, #0
 8003a18:	d04d      	beq.n	8003ab6 <_printf_i+0x1b6>
 8003a1a:	4615      	mov	r5, r2
 8003a1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a20:	fb03 6711 	mls	r7, r3, r1, r6
 8003a24:	5dc7      	ldrb	r7, [r0, r7]
 8003a26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a2a:	4637      	mov	r7, r6
 8003a2c:	42bb      	cmp	r3, r7
 8003a2e:	460e      	mov	r6, r1
 8003a30:	d9f4      	bls.n	8003a1c <_printf_i+0x11c>
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d10b      	bne.n	8003a4e <_printf_i+0x14e>
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	07de      	lsls	r6, r3, #31
 8003a3a:	d508      	bpl.n	8003a4e <_printf_i+0x14e>
 8003a3c:	6923      	ldr	r3, [r4, #16]
 8003a3e:	6861      	ldr	r1, [r4, #4]
 8003a40:	4299      	cmp	r1, r3
 8003a42:	bfde      	ittt	le
 8003a44:	2330      	movle	r3, #48	; 0x30
 8003a46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a4e:	1b52      	subs	r2, r2, r5
 8003a50:	6122      	str	r2, [r4, #16]
 8003a52:	464b      	mov	r3, r9
 8003a54:	4621      	mov	r1, r4
 8003a56:	4640      	mov	r0, r8
 8003a58:	f8cd a000 	str.w	sl, [sp]
 8003a5c:	aa03      	add	r2, sp, #12
 8003a5e:	f7ff fedf 	bl	8003820 <_printf_common>
 8003a62:	3001      	adds	r0, #1
 8003a64:	d14c      	bne.n	8003b00 <_printf_i+0x200>
 8003a66:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6a:	b004      	add	sp, #16
 8003a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a70:	4834      	ldr	r0, [pc, #208]	; (8003b44 <_printf_i+0x244>)
 8003a72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a76:	6829      	ldr	r1, [r5, #0]
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a7e:	6029      	str	r1, [r5, #0]
 8003a80:	061d      	lsls	r5, r3, #24
 8003a82:	d514      	bpl.n	8003aae <_printf_i+0x1ae>
 8003a84:	07df      	lsls	r7, r3, #31
 8003a86:	bf44      	itt	mi
 8003a88:	f043 0320 	orrmi.w	r3, r3, #32
 8003a8c:	6023      	strmi	r3, [r4, #0]
 8003a8e:	b91e      	cbnz	r6, 8003a98 <_printf_i+0x198>
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	f023 0320 	bic.w	r3, r3, #32
 8003a96:	6023      	str	r3, [r4, #0]
 8003a98:	2310      	movs	r3, #16
 8003a9a:	e7af      	b.n	80039fc <_printf_i+0xfc>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	f043 0320 	orr.w	r3, r3, #32
 8003aa2:	6023      	str	r3, [r4, #0]
 8003aa4:	2378      	movs	r3, #120	; 0x78
 8003aa6:	4828      	ldr	r0, [pc, #160]	; (8003b48 <_printf_i+0x248>)
 8003aa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aac:	e7e3      	b.n	8003a76 <_printf_i+0x176>
 8003aae:	0659      	lsls	r1, r3, #25
 8003ab0:	bf48      	it	mi
 8003ab2:	b2b6      	uxthmi	r6, r6
 8003ab4:	e7e6      	b.n	8003a84 <_printf_i+0x184>
 8003ab6:	4615      	mov	r5, r2
 8003ab8:	e7bb      	b.n	8003a32 <_printf_i+0x132>
 8003aba:	682b      	ldr	r3, [r5, #0]
 8003abc:	6826      	ldr	r6, [r4, #0]
 8003abe:	1d18      	adds	r0, r3, #4
 8003ac0:	6961      	ldr	r1, [r4, #20]
 8003ac2:	6028      	str	r0, [r5, #0]
 8003ac4:	0635      	lsls	r5, r6, #24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	d501      	bpl.n	8003ace <_printf_i+0x1ce>
 8003aca:	6019      	str	r1, [r3, #0]
 8003acc:	e002      	b.n	8003ad4 <_printf_i+0x1d4>
 8003ace:	0670      	lsls	r0, r6, #25
 8003ad0:	d5fb      	bpl.n	8003aca <_printf_i+0x1ca>
 8003ad2:	8019      	strh	r1, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	4615      	mov	r5, r2
 8003ad8:	6123      	str	r3, [r4, #16]
 8003ada:	e7ba      	b.n	8003a52 <_printf_i+0x152>
 8003adc:	682b      	ldr	r3, [r5, #0]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	1d1a      	adds	r2, r3, #4
 8003ae2:	602a      	str	r2, [r5, #0]
 8003ae4:	681d      	ldr	r5, [r3, #0]
 8003ae6:	6862      	ldr	r2, [r4, #4]
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f000 f82f 	bl	8003b4c <memchr>
 8003aee:	b108      	cbz	r0, 8003af4 <_printf_i+0x1f4>
 8003af0:	1b40      	subs	r0, r0, r5
 8003af2:	6060      	str	r0, [r4, #4]
 8003af4:	6863      	ldr	r3, [r4, #4]
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	2300      	movs	r3, #0
 8003afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003afe:	e7a8      	b.n	8003a52 <_printf_i+0x152>
 8003b00:	462a      	mov	r2, r5
 8003b02:	4649      	mov	r1, r9
 8003b04:	4640      	mov	r0, r8
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	47d0      	blx	sl
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d0ab      	beq.n	8003a66 <_printf_i+0x166>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	079b      	lsls	r3, r3, #30
 8003b12:	d413      	bmi.n	8003b3c <_printf_i+0x23c>
 8003b14:	68e0      	ldr	r0, [r4, #12]
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	4298      	cmp	r0, r3
 8003b1a:	bfb8      	it	lt
 8003b1c:	4618      	movlt	r0, r3
 8003b1e:	e7a4      	b.n	8003a6a <_printf_i+0x16a>
 8003b20:	2301      	movs	r3, #1
 8003b22:	4632      	mov	r2, r6
 8003b24:	4649      	mov	r1, r9
 8003b26:	4640      	mov	r0, r8
 8003b28:	47d0      	blx	sl
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d09b      	beq.n	8003a66 <_printf_i+0x166>
 8003b2e:	3501      	adds	r5, #1
 8003b30:	68e3      	ldr	r3, [r4, #12]
 8003b32:	9903      	ldr	r1, [sp, #12]
 8003b34:	1a5b      	subs	r3, r3, r1
 8003b36:	42ab      	cmp	r3, r5
 8003b38:	dcf2      	bgt.n	8003b20 <_printf_i+0x220>
 8003b3a:	e7eb      	b.n	8003b14 <_printf_i+0x214>
 8003b3c:	2500      	movs	r5, #0
 8003b3e:	f104 0619 	add.w	r6, r4, #25
 8003b42:	e7f5      	b.n	8003b30 <_printf_i+0x230>
 8003b44:	08003e83 	.word	0x08003e83
 8003b48:	08003e94 	.word	0x08003e94

08003b4c <memchr>:
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	b510      	push	{r4, lr}
 8003b50:	b2c9      	uxtb	r1, r1
 8003b52:	4402      	add	r2, r0
 8003b54:	4293      	cmp	r3, r2
 8003b56:	4618      	mov	r0, r3
 8003b58:	d101      	bne.n	8003b5e <memchr+0x12>
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	e003      	b.n	8003b66 <memchr+0x1a>
 8003b5e:	7804      	ldrb	r4, [r0, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	428c      	cmp	r4, r1
 8003b64:	d1f6      	bne.n	8003b54 <memchr+0x8>
 8003b66:	bd10      	pop	{r4, pc}

08003b68 <memcpy>:
 8003b68:	440a      	add	r2, r1
 8003b6a:	4291      	cmp	r1, r2
 8003b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b70:	d100      	bne.n	8003b74 <memcpy+0xc>
 8003b72:	4770      	bx	lr
 8003b74:	b510      	push	{r4, lr}
 8003b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b7a:	4291      	cmp	r1, r2
 8003b7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b80:	d1f9      	bne.n	8003b76 <memcpy+0xe>
 8003b82:	bd10      	pop	{r4, pc}

08003b84 <memmove>:
 8003b84:	4288      	cmp	r0, r1
 8003b86:	b510      	push	{r4, lr}
 8003b88:	eb01 0402 	add.w	r4, r1, r2
 8003b8c:	d902      	bls.n	8003b94 <memmove+0x10>
 8003b8e:	4284      	cmp	r4, r0
 8003b90:	4623      	mov	r3, r4
 8003b92:	d807      	bhi.n	8003ba4 <memmove+0x20>
 8003b94:	1e43      	subs	r3, r0, #1
 8003b96:	42a1      	cmp	r1, r4
 8003b98:	d008      	beq.n	8003bac <memmove+0x28>
 8003b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ba2:	e7f8      	b.n	8003b96 <memmove+0x12>
 8003ba4:	4601      	mov	r1, r0
 8003ba6:	4402      	add	r2, r0
 8003ba8:	428a      	cmp	r2, r1
 8003baa:	d100      	bne.n	8003bae <memmove+0x2a>
 8003bac:	bd10      	pop	{r4, pc}
 8003bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bb6:	e7f7      	b.n	8003ba8 <memmove+0x24>

08003bb8 <_free_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4605      	mov	r5, r0
 8003bbc:	2900      	cmp	r1, #0
 8003bbe:	d040      	beq.n	8003c42 <_free_r+0x8a>
 8003bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc4:	1f0c      	subs	r4, r1, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bfb8      	it	lt
 8003bca:	18e4      	addlt	r4, r4, r3
 8003bcc:	f000 f910 	bl	8003df0 <__malloc_lock>
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <_free_r+0x8c>)
 8003bd2:	6813      	ldr	r3, [r2, #0]
 8003bd4:	b933      	cbnz	r3, 8003be4 <_free_r+0x2c>
 8003bd6:	6063      	str	r3, [r4, #4]
 8003bd8:	6014      	str	r4, [r2, #0]
 8003bda:	4628      	mov	r0, r5
 8003bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003be0:	f000 b90c 	b.w	8003dfc <__malloc_unlock>
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	d908      	bls.n	8003bfa <_free_r+0x42>
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	1821      	adds	r1, r4, r0
 8003bec:	428b      	cmp	r3, r1
 8003bee:	bf01      	itttt	eq
 8003bf0:	6819      	ldreq	r1, [r3, #0]
 8003bf2:	685b      	ldreq	r3, [r3, #4]
 8003bf4:	1809      	addeq	r1, r1, r0
 8003bf6:	6021      	streq	r1, [r4, #0]
 8003bf8:	e7ed      	b.n	8003bd6 <_free_r+0x1e>
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b10b      	cbz	r3, 8003c04 <_free_r+0x4c>
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	d9fa      	bls.n	8003bfa <_free_r+0x42>
 8003c04:	6811      	ldr	r1, [r2, #0]
 8003c06:	1850      	adds	r0, r2, r1
 8003c08:	42a0      	cmp	r0, r4
 8003c0a:	d10b      	bne.n	8003c24 <_free_r+0x6c>
 8003c0c:	6820      	ldr	r0, [r4, #0]
 8003c0e:	4401      	add	r1, r0
 8003c10:	1850      	adds	r0, r2, r1
 8003c12:	4283      	cmp	r3, r0
 8003c14:	6011      	str	r1, [r2, #0]
 8003c16:	d1e0      	bne.n	8003bda <_free_r+0x22>
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4401      	add	r1, r0
 8003c1e:	6011      	str	r1, [r2, #0]
 8003c20:	6053      	str	r3, [r2, #4]
 8003c22:	e7da      	b.n	8003bda <_free_r+0x22>
 8003c24:	d902      	bls.n	8003c2c <_free_r+0x74>
 8003c26:	230c      	movs	r3, #12
 8003c28:	602b      	str	r3, [r5, #0]
 8003c2a:	e7d6      	b.n	8003bda <_free_r+0x22>
 8003c2c:	6820      	ldr	r0, [r4, #0]
 8003c2e:	1821      	adds	r1, r4, r0
 8003c30:	428b      	cmp	r3, r1
 8003c32:	bf01      	itttt	eq
 8003c34:	6819      	ldreq	r1, [r3, #0]
 8003c36:	685b      	ldreq	r3, [r3, #4]
 8003c38:	1809      	addeq	r1, r1, r0
 8003c3a:	6021      	streq	r1, [r4, #0]
 8003c3c:	6063      	str	r3, [r4, #4]
 8003c3e:	6054      	str	r4, [r2, #4]
 8003c40:	e7cb      	b.n	8003bda <_free_r+0x22>
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	20000220 	.word	0x20000220

08003c48 <sbrk_aligned>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4e0e      	ldr	r6, [pc, #56]	; (8003c84 <sbrk_aligned+0x3c>)
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	6831      	ldr	r1, [r6, #0]
 8003c50:	4605      	mov	r5, r0
 8003c52:	b911      	cbnz	r1, 8003c5a <sbrk_aligned+0x12>
 8003c54:	f000 f8bc 	bl	8003dd0 <_sbrk_r>
 8003c58:	6030      	str	r0, [r6, #0]
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f000 f8b7 	bl	8003dd0 <_sbrk_r>
 8003c62:	1c43      	adds	r3, r0, #1
 8003c64:	d00a      	beq.n	8003c7c <sbrk_aligned+0x34>
 8003c66:	1cc4      	adds	r4, r0, #3
 8003c68:	f024 0403 	bic.w	r4, r4, #3
 8003c6c:	42a0      	cmp	r0, r4
 8003c6e:	d007      	beq.n	8003c80 <sbrk_aligned+0x38>
 8003c70:	1a21      	subs	r1, r4, r0
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 f8ac 	bl	8003dd0 <_sbrk_r>
 8003c78:	3001      	adds	r0, #1
 8003c7a:	d101      	bne.n	8003c80 <sbrk_aligned+0x38>
 8003c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c80:	4620      	mov	r0, r4
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	20000224 	.word	0x20000224

08003c88 <_malloc_r>:
 8003c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c8c:	1ccd      	adds	r5, r1, #3
 8003c8e:	f025 0503 	bic.w	r5, r5, #3
 8003c92:	3508      	adds	r5, #8
 8003c94:	2d0c      	cmp	r5, #12
 8003c96:	bf38      	it	cc
 8003c98:	250c      	movcc	r5, #12
 8003c9a:	2d00      	cmp	r5, #0
 8003c9c:	4607      	mov	r7, r0
 8003c9e:	db01      	blt.n	8003ca4 <_malloc_r+0x1c>
 8003ca0:	42a9      	cmp	r1, r5
 8003ca2:	d905      	bls.n	8003cb0 <_malloc_r+0x28>
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	4630      	mov	r0, r6
 8003cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cb0:	4e2e      	ldr	r6, [pc, #184]	; (8003d6c <_malloc_r+0xe4>)
 8003cb2:	f000 f89d 	bl	8003df0 <__malloc_lock>
 8003cb6:	6833      	ldr	r3, [r6, #0]
 8003cb8:	461c      	mov	r4, r3
 8003cba:	bb34      	cbnz	r4, 8003d0a <_malloc_r+0x82>
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	f7ff ffc2 	bl	8003c48 <sbrk_aligned>
 8003cc4:	1c43      	adds	r3, r0, #1
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	d14d      	bne.n	8003d66 <_malloc_r+0xde>
 8003cca:	6834      	ldr	r4, [r6, #0]
 8003ccc:	4626      	mov	r6, r4
 8003cce:	2e00      	cmp	r6, #0
 8003cd0:	d140      	bne.n	8003d54 <_malloc_r+0xcc>
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	4631      	mov	r1, r6
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	eb04 0803 	add.w	r8, r4, r3
 8003cdc:	f000 f878 	bl	8003dd0 <_sbrk_r>
 8003ce0:	4580      	cmp	r8, r0
 8003ce2:	d13a      	bne.n	8003d5a <_malloc_r+0xd2>
 8003ce4:	6821      	ldr	r1, [r4, #0]
 8003ce6:	3503      	adds	r5, #3
 8003ce8:	1a6d      	subs	r5, r5, r1
 8003cea:	f025 0503 	bic.w	r5, r5, #3
 8003cee:	3508      	adds	r5, #8
 8003cf0:	2d0c      	cmp	r5, #12
 8003cf2:	bf38      	it	cc
 8003cf4:	250c      	movcc	r5, #12
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	f7ff ffa5 	bl	8003c48 <sbrk_aligned>
 8003cfe:	3001      	adds	r0, #1
 8003d00:	d02b      	beq.n	8003d5a <_malloc_r+0xd2>
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	442b      	add	r3, r5
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	e00e      	b.n	8003d28 <_malloc_r+0xa0>
 8003d0a:	6822      	ldr	r2, [r4, #0]
 8003d0c:	1b52      	subs	r2, r2, r5
 8003d0e:	d41e      	bmi.n	8003d4e <_malloc_r+0xc6>
 8003d10:	2a0b      	cmp	r2, #11
 8003d12:	d916      	bls.n	8003d42 <_malloc_r+0xba>
 8003d14:	1961      	adds	r1, r4, r5
 8003d16:	42a3      	cmp	r3, r4
 8003d18:	6025      	str	r5, [r4, #0]
 8003d1a:	bf18      	it	ne
 8003d1c:	6059      	strne	r1, [r3, #4]
 8003d1e:	6863      	ldr	r3, [r4, #4]
 8003d20:	bf08      	it	eq
 8003d22:	6031      	streq	r1, [r6, #0]
 8003d24:	5162      	str	r2, [r4, r5]
 8003d26:	604b      	str	r3, [r1, #4]
 8003d28:	4638      	mov	r0, r7
 8003d2a:	f104 060b 	add.w	r6, r4, #11
 8003d2e:	f000 f865 	bl	8003dfc <__malloc_unlock>
 8003d32:	f026 0607 	bic.w	r6, r6, #7
 8003d36:	1d23      	adds	r3, r4, #4
 8003d38:	1af2      	subs	r2, r6, r3
 8003d3a:	d0b6      	beq.n	8003caa <_malloc_r+0x22>
 8003d3c:	1b9b      	subs	r3, r3, r6
 8003d3e:	50a3      	str	r3, [r4, r2]
 8003d40:	e7b3      	b.n	8003caa <_malloc_r+0x22>
 8003d42:	6862      	ldr	r2, [r4, #4]
 8003d44:	42a3      	cmp	r3, r4
 8003d46:	bf0c      	ite	eq
 8003d48:	6032      	streq	r2, [r6, #0]
 8003d4a:	605a      	strne	r2, [r3, #4]
 8003d4c:	e7ec      	b.n	8003d28 <_malloc_r+0xa0>
 8003d4e:	4623      	mov	r3, r4
 8003d50:	6864      	ldr	r4, [r4, #4]
 8003d52:	e7b2      	b.n	8003cba <_malloc_r+0x32>
 8003d54:	4634      	mov	r4, r6
 8003d56:	6876      	ldr	r6, [r6, #4]
 8003d58:	e7b9      	b.n	8003cce <_malloc_r+0x46>
 8003d5a:	230c      	movs	r3, #12
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	f000 f84c 	bl	8003dfc <__malloc_unlock>
 8003d64:	e7a1      	b.n	8003caa <_malloc_r+0x22>
 8003d66:	6025      	str	r5, [r4, #0]
 8003d68:	e7de      	b.n	8003d28 <_malloc_r+0xa0>
 8003d6a:	bf00      	nop
 8003d6c:	20000220 	.word	0x20000220

08003d70 <_realloc_r>:
 8003d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d74:	4680      	mov	r8, r0
 8003d76:	4614      	mov	r4, r2
 8003d78:	460e      	mov	r6, r1
 8003d7a:	b921      	cbnz	r1, 8003d86 <_realloc_r+0x16>
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d82:	f7ff bf81 	b.w	8003c88 <_malloc_r>
 8003d86:	b92a      	cbnz	r2, 8003d94 <_realloc_r+0x24>
 8003d88:	f7ff ff16 	bl	8003bb8 <_free_r>
 8003d8c:	4625      	mov	r5, r4
 8003d8e:	4628      	mov	r0, r5
 8003d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d94:	f000 f838 	bl	8003e08 <_malloc_usable_size_r>
 8003d98:	4284      	cmp	r4, r0
 8003d9a:	4607      	mov	r7, r0
 8003d9c:	d802      	bhi.n	8003da4 <_realloc_r+0x34>
 8003d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003da2:	d812      	bhi.n	8003dca <_realloc_r+0x5a>
 8003da4:	4621      	mov	r1, r4
 8003da6:	4640      	mov	r0, r8
 8003da8:	f7ff ff6e 	bl	8003c88 <_malloc_r>
 8003dac:	4605      	mov	r5, r0
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d0ed      	beq.n	8003d8e <_realloc_r+0x1e>
 8003db2:	42bc      	cmp	r4, r7
 8003db4:	4622      	mov	r2, r4
 8003db6:	4631      	mov	r1, r6
 8003db8:	bf28      	it	cs
 8003dba:	463a      	movcs	r2, r7
 8003dbc:	f7ff fed4 	bl	8003b68 <memcpy>
 8003dc0:	4631      	mov	r1, r6
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	f7ff fef8 	bl	8003bb8 <_free_r>
 8003dc8:	e7e1      	b.n	8003d8e <_realloc_r+0x1e>
 8003dca:	4635      	mov	r5, r6
 8003dcc:	e7df      	b.n	8003d8e <_realloc_r+0x1e>
	...

08003dd0 <_sbrk_r>:
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	4d05      	ldr	r5, [pc, #20]	; (8003dec <_sbrk_r+0x1c>)
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	4608      	mov	r0, r1
 8003dda:	602b      	str	r3, [r5, #0]
 8003ddc:	f7fc ff62 	bl	8000ca4 <_sbrk>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d102      	bne.n	8003dea <_sbrk_r+0x1a>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	b103      	cbz	r3, 8003dea <_sbrk_r+0x1a>
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	20000228 	.word	0x20000228

08003df0 <__malloc_lock>:
 8003df0:	4801      	ldr	r0, [pc, #4]	; (8003df8 <__malloc_lock+0x8>)
 8003df2:	f000 b811 	b.w	8003e18 <__retarget_lock_acquire_recursive>
 8003df6:	bf00      	nop
 8003df8:	2000022c 	.word	0x2000022c

08003dfc <__malloc_unlock>:
 8003dfc:	4801      	ldr	r0, [pc, #4]	; (8003e04 <__malloc_unlock+0x8>)
 8003dfe:	f000 b80c 	b.w	8003e1a <__retarget_lock_release_recursive>
 8003e02:	bf00      	nop
 8003e04:	2000022c 	.word	0x2000022c

08003e08 <_malloc_usable_size_r>:
 8003e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e0c:	1f18      	subs	r0, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	bfbc      	itt	lt
 8003e12:	580b      	ldrlt	r3, [r1, r0]
 8003e14:	18c0      	addlt	r0, r0, r3
 8003e16:	4770      	bx	lr

08003e18 <__retarget_lock_acquire_recursive>:
 8003e18:	4770      	bx	lr

08003e1a <__retarget_lock_release_recursive>:
 8003e1a:	4770      	bx	lr

08003e1c <_init>:
 8003e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1e:	bf00      	nop
 8003e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e22:	bc08      	pop	{r3}
 8003e24:	469e      	mov	lr, r3
 8003e26:	4770      	bx	lr

08003e28 <_fini>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr
